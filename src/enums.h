
// This file has been automatically generated by a script.
// Do not make changes to this file manually, as they will be discarded
// as soon as the project is recompiled

#ifndef ENUMS_H
#define ENUMS_H
#include "enum.h"

namespace enums {
  enum RaceType {
    RACE_NONE,
    RACE_VENOM ,
    RACE_BLOOD,
    RACE_UNDEAD,
    RACE_FIRE,
    RACE_ENERGY,
  }; // end enum
} // end namespace

typedef Enum<enums::RaceType, enums::RACE_ENERGY + 1> RaceType;

typedef Enum<enums::RaceType, enums::RACE_ENERGY + 1> RaceType__Base;

//begin enum definitions
  const RaceType RACE_NONE(enums::RACE_NONE);
  const RaceType RACE_VENOM (enums::RACE_VENOM );
  const RaceType RACE_BLOOD(enums::RACE_BLOOD);
  const RaceType RACE_UNDEAD(enums::RACE_UNDEAD);
  const RaceType RACE_FIRE(enums::RACE_FIRE);
  const RaceType RACE_ENERGY(enums::RACE_ENERGY);
//end enum definitions

namespace enums {
  enum Direction {
    NORTH = 0,
    EAST = 1,
    SOUTH = 2,
    WEST = 3,
    SOUTHWEST = 4,
    SOUTHEAST = 5,
    NORTHWEST = 6,
    NORTHEAST = 7,
  }; // end enum
} // end namespace

typedef Enum<enums::Direction, enums::NORTHEAST + 1> Direction;

typedef Enum<enums::Direction, enums::NORTHEAST + 1> Direction__Base;

//begin enum definitions
  const Direction NORTH(enums::NORTH);
  const Direction EAST(enums::EAST);
  const Direction SOUTH(enums::SOUTH);
  const Direction WEST(enums::WEST);
  const Direction SOUTHWEST(enums::SOUTHWEST);
  const Direction SOUTHEAST(enums::SOUTHEAST);
  const Direction NORTHWEST(enums::NORTHWEST);
  const Direction NORTHEAST(enums::NORTHEAST);
//end enum definitions

namespace enums {
  enum CombatType {
    COMBAT_NONE = 0,
    COMBAT_PHYSICALDAMAGE = 1,
    COMBAT_ENERGYDAMAGE = 2,
    COMBAT_EARTHDAMAGE = 4,
    COMBAT_FIREDAMAGE = 8,
    COMBAT_SCRIPTED_HEALTH = 16,
    COMBAT_SCRIPTED_MANA = 32,
    COMBAT_LIFEDRAIN = 64,
    COMBAT_MANADRAIN = 128,
    COMBAT_HEALING = 256,
    COMBAT_DROWNDAMAGE = 512,
    COMBAT_ICEDAMAGE = 1024,
    COMBAT_HOLYDAMAGE = 2048,
    COMBAT_DEATHDAMAGE = 4096,
  }; // end enum
} // end namespace

typedef BitEnum<enums::CombatType, 13> CombatType;

typedef Enum<enums::CombatType, 13> CombatType__Base;

//begin enum definitions
  const CombatType COMBAT_NONE(enums::COMBAT_NONE);
  const CombatType COMBAT_PHYSICALDAMAGE(enums::COMBAT_PHYSICALDAMAGE);
  const CombatType COMBAT_ENERGYDAMAGE(enums::COMBAT_ENERGYDAMAGE);
  const CombatType COMBAT_EARTHDAMAGE(enums::COMBAT_EARTHDAMAGE);
  const CombatType COMBAT_FIREDAMAGE(enums::COMBAT_FIREDAMAGE);
  const CombatType COMBAT_SCRIPTED_HEALTH(enums::COMBAT_SCRIPTED_HEALTH);
  const CombatType COMBAT_SCRIPTED_MANA(enums::COMBAT_SCRIPTED_MANA);
  const CombatType COMBAT_LIFEDRAIN(enums::COMBAT_LIFEDRAIN);
  const CombatType COMBAT_MANADRAIN(enums::COMBAT_MANADRAIN);
  const CombatType COMBAT_HEALING(enums::COMBAT_HEALING);
  const CombatType COMBAT_DROWNDAMAGE(enums::COMBAT_DROWNDAMAGE);
  const CombatType COMBAT_ICEDAMAGE(enums::COMBAT_ICEDAMAGE);
  const CombatType COMBAT_HOLYDAMAGE(enums::COMBAT_HOLYDAMAGE);
  const CombatType COMBAT_DEATHDAMAGE(enums::COMBAT_DEATHDAMAGE);
//end enum definitions

namespace enums {
  enum BlockType {
    BLOCK_NONE,
    BLOCK_DEFENSE,
    BLOCK_ARMOR,
    BLOCK_IMMUNITY,
  }; // end enum
} // end namespace

typedef Enum<enums::BlockType, enums::BLOCK_IMMUNITY + 1> BlockType;

typedef Enum<enums::BlockType, enums::BLOCK_IMMUNITY + 1> BlockType__Base;

//begin enum definitions
  const BlockType BLOCK_NONE(enums::BLOCK_NONE);
  const BlockType BLOCK_DEFENSE(enums::BLOCK_DEFENSE);
  const BlockType BLOCK_ARMOR(enums::BLOCK_ARMOR);
  const BlockType BLOCK_IMMUNITY(enums::BLOCK_IMMUNITY);
//end enum definitions

namespace enums {
  enum ViolationAction {
    ACTION_NOTATION = 0,
    ACTION_NAMEREPORT = 1,
    ACTION_BANISHMENT = 2,
    ACTION_BANREPORT = 3,
    ACTION_BANFINAL = 4,
    ACTION_BANREPORTFINAL = 5,
    ACTION_STATEMENT = 6,
    ACTION_DELETION = 7,
  }; // end enum
} // end namespace

typedef Enum<enums::ViolationAction, enums::ACTION_DELETION + 1> ViolationAction;

typedef Enum<enums::ViolationAction, enums::ACTION_DELETION + 1> ViolationAction__Base;

//begin enum definitions
  const ViolationAction ACTION_NOTATION(enums::ACTION_NOTATION);
  const ViolationAction ACTION_NAMEREPORT(enums::ACTION_NAMEREPORT);
  const ViolationAction ACTION_BANISHMENT(enums::ACTION_BANISHMENT);
  const ViolationAction ACTION_BANREPORT(enums::ACTION_BANREPORT);
  const ViolationAction ACTION_BANFINAL(enums::ACTION_BANFINAL);
  const ViolationAction ACTION_BANREPORTFINAL(enums::ACTION_BANREPORTFINAL);
  const ViolationAction ACTION_STATEMENT(enums::ACTION_STATEMENT);
  const ViolationAction ACTION_DELETION(enums::ACTION_DELETION);
//end enum definitions

namespace enums {
  enum SkillType {
    SKILL_FIST = 0,
    SKILL_CLUB = 1,
    SKILL_SWORD = 2,
    SKILL_AXE = 3,
    SKILL_DIST = 4,
    SKILL_SHIELD = 5,
    SKILL_FISH = 6,
  }; // end enum
} // end namespace

typedef Enum<enums::SkillType, enums::SKILL_FISH + 1> SkillType;

typedef Enum<enums::SkillType, enums::SKILL_FISH + 1> SkillType__Base;

//begin enum definitions
  const SkillType SKILL_FIST(enums::SKILL_FIST);
  const SkillType SKILL_CLUB(enums::SKILL_CLUB);
  const SkillType SKILL_SWORD(enums::SKILL_SWORD);
  const SkillType SKILL_AXE(enums::SKILL_AXE);
  const SkillType SKILL_DIST(enums::SKILL_DIST);
  const SkillType SKILL_SHIELD(enums::SKILL_SHIELD);
  const SkillType SKILL_FISH(enums::SKILL_FISH);
//end enum definitions

namespace enums {
  enum LevelType {
    LEVEL_FIST = SKILL_FIST,
    LEVEL_CLUB = SKILL_CLUB,
    LEVEL_SWORD = SKILL_SWORD,
    LEVEL_AXE = SKILL_AXE,
    LEVEL_DIST = SKILL_DIST,
    LEVEL_SHIELD = SKILL_SHIELD,
    LEVEL_FISH = SKILL_FISH,
    LEVEL_MAGIC = 7,
    LEVEL_EXPERIENCE = 8,
  }; // end enum
} // end namespace

typedef Enum<enums::LevelType, enums::LEVEL_EXPERIENCE + 1> LevelType;

typedef Enum<enums::LevelType, enums::LEVEL_EXPERIENCE + 1> LevelType__Base;

//begin enum definitions
  const LevelType LEVEL_FIST(enums::LEVEL_FIST);
  const LevelType LEVEL_CLUB(enums::LEVEL_CLUB);
  const LevelType LEVEL_SWORD(enums::LEVEL_SWORD);
  const LevelType LEVEL_AXE(enums::LEVEL_AXE);
  const LevelType LEVEL_DIST(enums::LEVEL_DIST);
  const LevelType LEVEL_SHIELD(enums::LEVEL_SHIELD);
  const LevelType LEVEL_FISH(enums::LEVEL_FISH);
  const LevelType LEVEL_MAGIC(enums::LEVEL_MAGIC);
  const LevelType LEVEL_EXPERIENCE(enums::LEVEL_EXPERIENCE);
//end enum definitions

namespace enums {
  enum PlayerStatType {
    STAT_MAXHITPOINTS,
    STAT_MAXMANAPOINTS,
    STAT_SOULPOINTS,
    STAT_MAGICPOINTS,
  }; // end enum
} // end namespace

typedef Enum<enums::PlayerStatType, enums::STAT_MAGICPOINTS + 1> PlayerStatType;

typedef Enum<enums::PlayerStatType, enums::STAT_MAGICPOINTS + 1> PlayerStatType__Base;

//begin enum definitions
  const PlayerStatType STAT_MAXHITPOINTS(enums::STAT_MAXHITPOINTS);
  const PlayerStatType STAT_MAXMANAPOINTS(enums::STAT_MAXMANAPOINTS);
  const PlayerStatType STAT_SOULPOINTS(enums::STAT_SOULPOINTS);
  const PlayerStatType STAT_MAGICPOINTS(enums::STAT_MAGICPOINTS);
//end enum definitions

namespace enums {
  enum LossType {
    LOSS_EXPERIENCE = 0,
    LOSS_MANASPENT = 1,
    LOSS_SKILLTRIES = 2,
    LOSS_ITEMS = 3,
    LOSS_CONTAINERS = 4,
  }; // end enum
} // end namespace

typedef Enum<enums::LossType, enums::LOSS_CONTAINERS + 1> LossType;

typedef Enum<enums::LossType, enums::LOSS_CONTAINERS + 1> LossType__Base;

//begin enum definitions
  const LossType LOSS_EXPERIENCE(enums::LOSS_EXPERIENCE);
  const LossType LOSS_MANASPENT(enums::LOSS_MANASPENT);
  const LossType LOSS_SKILLTRIES(enums::LOSS_SKILLTRIES);
  const LossType LOSS_ITEMS(enums::LOSS_ITEMS);
  const LossType LOSS_CONTAINERS(enums::LOSS_CONTAINERS);
//end enum definitions

namespace enums {
  enum PlayerSex {
    SEX_FEMALE = 0,
    SEX_MALE = 1,
    SEX_FEMALE_GAMEMASTER = 2,
    SEX_MALE_GAMEMASTER = 3,
    SEX_FEMALE_MANAGER = 4,
    SEX_MALE_MANAGER = 5,
    SEX_FEMALE_GOD = 6,
    SEX_MALE_GOD = 7,
  }; // end enum
} // end namespace

typedef Enum<enums::PlayerSex, enums::SEX_MALE_GOD + 1> PlayerSex;

typedef Enum<enums::PlayerSex, enums::SEX_MALE_GOD + 1> PlayerSex__Base;

//begin enum definitions
  const PlayerSex SEX_FEMALE(enums::SEX_FEMALE);
  const PlayerSex SEX_MALE(enums::SEX_MALE);
  const PlayerSex SEX_FEMALE_GAMEMASTER(enums::SEX_FEMALE_GAMEMASTER);
  const PlayerSex SEX_MALE_GAMEMASTER(enums::SEX_MALE_GAMEMASTER);
  const PlayerSex SEX_FEMALE_MANAGER(enums::SEX_FEMALE_MANAGER);
  const PlayerSex SEX_MALE_MANAGER(enums::SEX_MALE_MANAGER);
  const PlayerSex SEX_FEMALE_GOD(enums::SEX_FEMALE_GOD);
  const PlayerSex SEX_MALE_GOD(enums::SEX_MALE_GOD);
//end enum definitions

namespace enums {
  enum ChaseMode {
    CHASEMODE_STANDSTILL,
    CHASEMODE_FOLLOW,
  }; // end enum
} // end namespace

typedef Enum<enums::ChaseMode, enums::CHASEMODE_FOLLOW + 1> ChaseMode;

typedef Enum<enums::ChaseMode, enums::CHASEMODE_FOLLOW + 1> ChaseMode__Base;

//begin enum definitions
  const ChaseMode CHASEMODE_STANDSTILL(enums::CHASEMODE_STANDSTILL);
  const ChaseMode CHASEMODE_FOLLOW(enums::CHASEMODE_FOLLOW);
//end enum definitions

namespace enums {
  enum FightMode {
    FIGHTMODE_ATTACK,
    FIGHTMODE_BALANCED,
    FIGHTMODE_DEFENSE,
  }; // end enum
} // end namespace

typedef Enum<enums::FightMode, enums::FIGHTMODE_DEFENSE + 1> FightMode;

typedef Enum<enums::FightMode, enums::FIGHTMODE_DEFENSE + 1> FightMode__Base;

//begin enum definitions
  const FightMode FIGHTMODE_ATTACK(enums::FIGHTMODE_ATTACK);
  const FightMode FIGHTMODE_BALANCED(enums::FIGHTMODE_BALANCED);
  const FightMode FIGHTMODE_DEFENSE(enums::FIGHTMODE_DEFENSE);
//end enum definitions

namespace enums {
  enum TradeState {
    TRADE_NONE,
    TRADE_INITIATED,
    TRADE_ACCEPT,
    TRADE_ACKNOWLEDGE,
    TRADE_TRANSFER,
  }; // end enum
} // end namespace

typedef Enum<enums::TradeState, enums::TRADE_TRANSFER + 1> TradeState;

typedef Enum<enums::TradeState, enums::TRADE_TRANSFER + 1> TradeState__Base;

//begin enum definitions
  const TradeState TRADE_NONE(enums::TRADE_NONE);
  const TradeState TRADE_INITIATED(enums::TRADE_INITIATED);
  const TradeState TRADE_ACCEPT(enums::TRADE_ACCEPT);
  const TradeState TRADE_ACKNOWLEDGE(enums::TRADE_ACKNOWLEDGE);
  const TradeState TRADE_TRANSFER(enums::TRADE_TRANSFER);
//end enum definitions

namespace enums {
  enum SlotType {
    SLOT_WHEREEVER = 0,
    SLOT_HEAD = 1,
    SLOT_NECKLACE = 2,
    SLOT_BACKPACK = 3,
    SLOT_ARMOR = 4,
    SLOT_RIGHT = 5,
    SLOT_LEFT = 6,
    SLOT_LEGS = 7,
    SLOT_FEET = 8,
    SLOT_RING = 9,
    SLOT_AMMO = 10,
    SLOT_HAND = 11,
    SLOT_TWO_HAND = SLOT_HAND,
    SLOT_FIRST = SLOT_HEAD,
    SLOT_LAST = SLOT_HAND,
  }; // end enum
} // end namespace

typedef Enum<enums::SlotType, enums::SLOT_LAST + 1> SlotType;

typedef Enum<enums::SlotType, enums::SLOT_LAST + 1> SlotType__Base;

//begin enum definitions
  const SlotType SLOT_WHEREEVER(enums::SLOT_WHEREEVER);
  const SlotType SLOT_HEAD(enums::SLOT_HEAD);
  const SlotType SLOT_NECKLACE(enums::SLOT_NECKLACE);
  const SlotType SLOT_BACKPACK(enums::SLOT_BACKPACK);
  const SlotType SLOT_ARMOR(enums::SLOT_ARMOR);
  const SlotType SLOT_RIGHT(enums::SLOT_RIGHT);
  const SlotType SLOT_LEFT(enums::SLOT_LEFT);
  const SlotType SLOT_LEGS(enums::SLOT_LEGS);
  const SlotType SLOT_FEET(enums::SLOT_FEET);
  const SlotType SLOT_RING(enums::SLOT_RING);
  const SlotType SLOT_AMMO(enums::SLOT_AMMO);
  const SlotType SLOT_HAND(enums::SLOT_HAND);
  const SlotType SLOT_TWO_HAND(enums::SLOT_TWO_HAND);
  const SlotType SLOT_FIRST(enums::SLOT_FIRST);
  const SlotType SLOT_LAST(enums::SLOT_LAST);
//end enum definitions

namespace enums {
  enum SlotPosition {
    SLOTPOSITION_NONE,
    SLOTPOSITION_HEAD = 1,
    SLOTPOSITION_NECKLACE = 2,
    SLOTPOSITION_BACKPACK = 4,
    SLOTPOSITION_ARMOR = 8,
    SLOTPOSITION_RIGHT = 16,
    SLOTPOSITION_LEFT = 32,
    SLOTPOSITION_LEGS = 64,
    SLOTPOSITION_FEET = 128,
    SLOTPOSITION_RING = 256,
    SLOTPOSITION_AMMO = 512,
    SLOTPOSITION_DEPOT = 1024,
    SLOTPOSITION_TWO_HAND = 2048,
    SLOTPOSITION_HAND = SLOTPOSITION_LEFT | SLOTPOSITION_RIGHT,
    SLOTPOSITION_WHEREEVER,
  }; // end enum
} // end namespace

typedef BitEnum<enums::SlotPosition, -1> SlotPosition;

typedef Enum<enums::SlotPosition, -1> SlotPosition__Base;

//begin enum definitions
  const SlotPosition SLOTPOSITION_NONE(enums::SLOTPOSITION_NONE);
  const SlotPosition SLOTPOSITION_HEAD(enums::SLOTPOSITION_HEAD);
  const SlotPosition SLOTPOSITION_NECKLACE(enums::SLOTPOSITION_NECKLACE);
  const SlotPosition SLOTPOSITION_BACKPACK(enums::SLOTPOSITION_BACKPACK);
  const SlotPosition SLOTPOSITION_ARMOR(enums::SLOTPOSITION_ARMOR);
  const SlotPosition SLOTPOSITION_RIGHT(enums::SLOTPOSITION_RIGHT);
  const SlotPosition SLOTPOSITION_LEFT(enums::SLOTPOSITION_LEFT);
  const SlotPosition SLOTPOSITION_LEGS(enums::SLOTPOSITION_LEGS);
  const SlotPosition SLOTPOSITION_FEET(enums::SLOTPOSITION_FEET);
  const SlotPosition SLOTPOSITION_RING(enums::SLOTPOSITION_RING);
  const SlotPosition SLOTPOSITION_AMMO(enums::SLOTPOSITION_AMMO);
  const SlotPosition SLOTPOSITION_DEPOT(enums::SLOTPOSITION_DEPOT);
  const SlotPosition SLOTPOSITION_TWO_HAND(enums::SLOTPOSITION_TWO_HAND);
  const SlotPosition SLOTPOSITION_HAND(enums::SLOTPOSITION_HAND);
  const SlotPosition SLOTPOSITION_WHEREEVER(enums::SLOTPOSITION_WHEREEVER);
//end enum definitions

namespace enums {
  enum TileProp {
    TILEPROP_NONE = 0,
    TILEPROP_PROTECTIONZONE = 1,
    TILEPROP_DEPRECATED = 2,
    TILEPROP_NOPVPZONE = 4,
    TILEPROP_NOLOGOUT = 8,
    TILEPROP_PVPZONE = 16,
    TILEPROP_REFRESH = 32,
    TILEPROP_POSITIONCHANGE = 64,
    TILEPROP_FLOORCHANGE = 128,
    TILEPROP_FLOORCHANGE_DOWN = 256,
    TILEPROP_FLOORCHANGE_NORTH = 512,
    TILEPROP_FLOORCHANGE_SOUTH = 1024,
    TILEPROP_FLOORCHANGE_EAST = 2048,
    TILEPROP_FLOORCHANGE_WEST = 4096,
    TILEPROP_BLOCKSOLID = 8192,
    TILEPROP_BLOCKPATH = 16384,
    TILEPROP_VERTICAL = 32768,
    TILEPROP_HORIZONTAL = 65536,
    TILEPROP_BLOCKPROJECTILE = 131072,
    TILEPROP_BLOCKSOLIDNOTMOVEABLE = 262144,
    TILEPROP_BLOCKPATHNOTMOVEABLE = 524288,
    TILEPROP_BLOCKPATHNOTFIELD = 1048576,
    TILEPROP_HOUSE_TILE = 2097152,
    TILEPROP_DYNAMIC_TILE = 4194304,
    TILEPROP_INDEXED_TILE = 8388608,
  }; // end enum
} // end namespace

typedef BitEnum<enums::TileProp, 24> TileProp;

typedef Enum<enums::TileProp, 24> TileProp__Base;

//begin enum definitions
  const TileProp TILEPROP_NONE(enums::TILEPROP_NONE);
  const TileProp TILEPROP_PROTECTIONZONE(enums::TILEPROP_PROTECTIONZONE);
  const TileProp TILEPROP_DEPRECATED(enums::TILEPROP_DEPRECATED);
  const TileProp TILEPROP_NOPVPZONE(enums::TILEPROP_NOPVPZONE);
  const TileProp TILEPROP_NOLOGOUT(enums::TILEPROP_NOLOGOUT);
  const TileProp TILEPROP_PVPZONE(enums::TILEPROP_PVPZONE);
  const TileProp TILEPROP_REFRESH(enums::TILEPROP_REFRESH);
  const TileProp TILEPROP_POSITIONCHANGE(enums::TILEPROP_POSITIONCHANGE);
  const TileProp TILEPROP_FLOORCHANGE(enums::TILEPROP_FLOORCHANGE);
  const TileProp TILEPROP_FLOORCHANGE_DOWN(enums::TILEPROP_FLOORCHANGE_DOWN);
  const TileProp TILEPROP_FLOORCHANGE_NORTH(enums::TILEPROP_FLOORCHANGE_NORTH);
  const TileProp TILEPROP_FLOORCHANGE_SOUTH(enums::TILEPROP_FLOORCHANGE_SOUTH);
  const TileProp TILEPROP_FLOORCHANGE_EAST(enums::TILEPROP_FLOORCHANGE_EAST);
  const TileProp TILEPROP_FLOORCHANGE_WEST(enums::TILEPROP_FLOORCHANGE_WEST);
  const TileProp TILEPROP_BLOCKSOLID(enums::TILEPROP_BLOCKSOLID);
  const TileProp TILEPROP_BLOCKPATH(enums::TILEPROP_BLOCKPATH);
  const TileProp TILEPROP_VERTICAL(enums::TILEPROP_VERTICAL);
  const TileProp TILEPROP_HORIZONTAL(enums::TILEPROP_HORIZONTAL);
  const TileProp TILEPROP_BLOCKPROJECTILE(enums::TILEPROP_BLOCKPROJECTILE);
  const TileProp TILEPROP_BLOCKSOLIDNOTMOVEABLE(enums::TILEPROP_BLOCKSOLIDNOTMOVEABLE);
  const TileProp TILEPROP_BLOCKPATHNOTMOVEABLE(enums::TILEPROP_BLOCKPATHNOTMOVEABLE);
  const TileProp TILEPROP_BLOCKPATHNOTFIELD(enums::TILEPROP_BLOCKPATHNOTFIELD);
  const TileProp TILEPROP_HOUSE_TILE(enums::TILEPROP_HOUSE_TILE);
  const TileProp TILEPROP_DYNAMIC_TILE(enums::TILEPROP_DYNAMIC_TILE);
  const TileProp TILEPROP_INDEXED_TILE(enums::TILEPROP_INDEXED_TILE);
//end enum definitions

namespace enums {
  enum ZoneType {
    ZONE_PROTECTION,
    ZONE_NOPVP,
    ZONE_PVP,
    ZONE_NOLOGOUT,
    ZONE_NORMAL,
  }; // end enum
} // end namespace

typedef Enum<enums::ZoneType, enums::ZONE_NORMAL + 1> ZoneType;

typedef Enum<enums::ZoneType, enums::ZONE_NORMAL + 1> ZoneType__Base;

//begin enum definitions
  const ZoneType ZONE_PROTECTION(enums::ZONE_PROTECTION);
  const ZoneType ZONE_NOPVP(enums::ZONE_NOPVP);
  const ZoneType ZONE_PVP(enums::ZONE_PVP);
  const ZoneType ZONE_NOLOGOUT(enums::ZONE_NOLOGOUT);
  const ZoneType ZONE_NORMAL(enums::ZONE_NORMAL);
//end enum definitions

namespace enums {
  enum WorldType {
    WORLD_TYPE_NOPVP,
    WORLD_TYPE_PVP,
    WORLD_TYPE_PVPE,
  }; // end enum
} // end namespace

typedef Enum<enums::WorldType, enums::WORLD_TYPE_PVPE + 1> WorldType;

typedef Enum<enums::WorldType, enums::WORLD_TYPE_PVPE + 1> WorldType__Base;

//begin enum definitions
  const WorldType WORLD_TYPE_NOPVP(enums::WORLD_TYPE_NOPVP);
  const WorldType WORLD_TYPE_PVP(enums::WORLD_TYPE_PVP);
  const WorldType WORLD_TYPE_PVPE(enums::WORLD_TYPE_PVPE);
//end enum definitions

namespace enums {
  enum GameState {
    GAME_STATE_STARTUP,
    GAME_STATE_INIT,
    GAME_STATE_NORMAL,
    GAME_STATE_CLOSED,
    GAME_STATE_SHUTDOWN,
    GAME_STATE_CLOSING,
  }; // end enum
} // end namespace

typedef Enum<enums::GameState, enums::GAME_STATE_CLOSING + 1> GameState;

typedef Enum<enums::GameState, enums::GAME_STATE_CLOSING + 1> GameState__Base;

//begin enum definitions
  const GameState GAME_STATE_STARTUP(enums::GAME_STATE_STARTUP);
  const GameState GAME_STATE_INIT(enums::GAME_STATE_INIT);
  const GameState GAME_STATE_NORMAL(enums::GAME_STATE_NORMAL);
  const GameState GAME_STATE_CLOSED(enums::GAME_STATE_CLOSED);
  const GameState GAME_STATE_SHUTDOWN(enums::GAME_STATE_SHUTDOWN);
  const GameState GAME_STATE_CLOSING(enums::GAME_STATE_CLOSING);
//end enum definitions

namespace enums {
  enum ServerSaveType {
    SERVER_SAVE_FULL,
    SERVER_SAVE_BINARY,
    SERVER_SAVE_RELATIONAL,
    SERVER_SAVE_NORMAL,
    SERVER_SAVE_SHALLOW,
  }; // end enum
} // end namespace

typedef Enum<enums::ServerSaveType, enums::SERVER_SAVE_SHALLOW + 1> ServerSaveType;

typedef Enum<enums::ServerSaveType, enums::SERVER_SAVE_SHALLOW + 1> ServerSaveType__Base;

//begin enum definitions
  const ServerSaveType SERVER_SAVE_FULL(enums::SERVER_SAVE_FULL);
  const ServerSaveType SERVER_SAVE_BINARY(enums::SERVER_SAVE_BINARY);
  const ServerSaveType SERVER_SAVE_RELATIONAL(enums::SERVER_SAVE_RELATIONAL);
  const ServerSaveType SERVER_SAVE_NORMAL(enums::SERVER_SAVE_NORMAL);
  const ServerSaveType SERVER_SAVE_SHALLOW(enums::SERVER_SAVE_SHALLOW);
//end enum definitions

namespace Script {
namespace enums {
  enum ListenerType {
    ON_SAY_LISTENER,
    ON_USE_ITEM_LISTENER,
    ON_USE_WEAPON_LISTENER,
    ON_EQUIP_ITEM_LISTENER,
    ON_MOVE_CREATURE_LISTENER,
    ON_MOVE_ITEM_LISTENER,
    ON_OPEN_CHANNEL_LISTENER,
    ON_CLOSE_CHANNEL_LISTENER,
    ON_ACCOUNT_LOGIN_LISTENER,
    ON_LOGIN_LISTENER,
    ON_LOGOUT_LISTENER,
    ON_CHANGE_OUTFIT_LISTENER,
    ON_LOOK_LISTENER,
    ON_LOOKED_AT_LISTENER,
    ON_TURN_LISTENER,
    ON_LOAD_LISTENER,
    ON_UNLOAD_LISTENER,
    ON_SPAWN_LISTENER,
    ON_KILLED_LISTENER,
    ON_DEATH_BY_LISTENER,
    ON_KILL_LISTENER,
    ON_DEATH_LISTENER,
    ON_ADVANCE_LISTENER,
    ON_SHOP_PURCHASE_LISTENER,
    ON_SHOP_SELL_LISTENER,
    ON_SHOP_CLOSE_LISTENER,
    ON_TRADE_BEGIN_LISTENER,
    ON_TRADE_END_LISTENER,
    ON_ATTACK_LISTENER,
    ON_DAMAGE_LISTENER,
    ON_CONDITION_LISTENER,
    ON_ACTOR_LOAD_SPELL_LISTENER,
    ON_ACTOR_CAST_SPELL_LISTENER,
    ON_THINK_LISTENER,
    ON_HEAR_LISTENER,
    ON_SPOT_CREATURE_LISTENER,
    ON_LOSE_CREATURE_LISTENER,
  }; // end enum
} // end namespace

typedef Enum<Script::enums::ListenerType, Script::enums::ON_LOSE_CREATURE_LISTENER + 1> ListenerType;

typedef Enum<Script::enums::ListenerType, Script::enums::ON_LOSE_CREATURE_LISTENER + 1> ListenerType__Base;

//begin enum definitions
  const ListenerType ON_SAY_LISTENER(enums::ON_SAY_LISTENER);
  const ListenerType ON_USE_ITEM_LISTENER(enums::ON_USE_ITEM_LISTENER);
  const ListenerType ON_USE_WEAPON_LISTENER(enums::ON_USE_WEAPON_LISTENER);
  const ListenerType ON_EQUIP_ITEM_LISTENER(enums::ON_EQUIP_ITEM_LISTENER);
  const ListenerType ON_MOVE_CREATURE_LISTENER(enums::ON_MOVE_CREATURE_LISTENER);
  const ListenerType ON_MOVE_ITEM_LISTENER(enums::ON_MOVE_ITEM_LISTENER);
  const ListenerType ON_OPEN_CHANNEL_LISTENER(enums::ON_OPEN_CHANNEL_LISTENER);
  const ListenerType ON_CLOSE_CHANNEL_LISTENER(enums::ON_CLOSE_CHANNEL_LISTENER);
  const ListenerType ON_ACCOUNT_LOGIN_LISTENER(enums::ON_ACCOUNT_LOGIN_LISTENER);
  const ListenerType ON_LOGIN_LISTENER(enums::ON_LOGIN_LISTENER);
  const ListenerType ON_LOGOUT_LISTENER(enums::ON_LOGOUT_LISTENER);
  const ListenerType ON_CHANGE_OUTFIT_LISTENER(enums::ON_CHANGE_OUTFIT_LISTENER);
  const ListenerType ON_LOOK_LISTENER(enums::ON_LOOK_LISTENER);
  const ListenerType ON_LOOKED_AT_LISTENER(enums::ON_LOOKED_AT_LISTENER);
  const ListenerType ON_TURN_LISTENER(enums::ON_TURN_LISTENER);
  const ListenerType ON_LOAD_LISTENER(enums::ON_LOAD_LISTENER);
  const ListenerType ON_UNLOAD_LISTENER(enums::ON_UNLOAD_LISTENER);
  const ListenerType ON_SPAWN_LISTENER(enums::ON_SPAWN_LISTENER);
  const ListenerType ON_KILLED_LISTENER(enums::ON_KILLED_LISTENER);
  const ListenerType ON_DEATH_BY_LISTENER(enums::ON_DEATH_BY_LISTENER);
  const ListenerType ON_KILL_LISTENER(enums::ON_KILL_LISTENER);
  const ListenerType ON_DEATH_LISTENER(enums::ON_DEATH_LISTENER);
  const ListenerType ON_ADVANCE_LISTENER(enums::ON_ADVANCE_LISTENER);
  const ListenerType ON_SHOP_PURCHASE_LISTENER(enums::ON_SHOP_PURCHASE_LISTENER);
  const ListenerType ON_SHOP_SELL_LISTENER(enums::ON_SHOP_SELL_LISTENER);
  const ListenerType ON_SHOP_CLOSE_LISTENER(enums::ON_SHOP_CLOSE_LISTENER);
  const ListenerType ON_TRADE_BEGIN_LISTENER(enums::ON_TRADE_BEGIN_LISTENER);
  const ListenerType ON_TRADE_END_LISTENER(enums::ON_TRADE_END_LISTENER);
  const ListenerType ON_ATTACK_LISTENER(enums::ON_ATTACK_LISTENER);
  const ListenerType ON_DAMAGE_LISTENER(enums::ON_DAMAGE_LISTENER);
  const ListenerType ON_CONDITION_LISTENER(enums::ON_CONDITION_LISTENER);
  const ListenerType ON_ACTOR_LOAD_SPELL_LISTENER(enums::ON_ACTOR_LOAD_SPELL_LISTENER);
  const ListenerType ON_ACTOR_CAST_SPELL_LISTENER(enums::ON_ACTOR_CAST_SPELL_LISTENER);
  const ListenerType ON_THINK_LISTENER(enums::ON_THINK_LISTENER);
  const ListenerType ON_HEAR_LISTENER(enums::ON_HEAR_LISTENER);
  const ListenerType ON_SPOT_CREATURE_LISTENER(enums::ON_SPOT_CREATURE_LISTENER);
  const ListenerType ON_LOSE_CREATURE_LISTENER(enums::ON_LOSE_CREATURE_LISTENER);
//end enum definitions

} // end namespace Script

#endif
