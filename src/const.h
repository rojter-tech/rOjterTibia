
// This file has been automatically generated by a script.
// Do not make changes to this file manually, as they will be discarded
// as soon as the project is recompiled

#ifndef CONST_H
#define CONST_H

#include <stdint.h>
#include "enum.h"

namespace enums {
  enum ReturnValue {
    RET_NOERROR,
    RET_NOTPOSSIBLE,
    RET_NOTENOUGHROOM,
    RET_PLAYERISPZLOCKED,
    RET_PLAYERISNOTINVITED,
    RET_CANNOTTHROW,
    RET_THEREISNOWAY,
    RET_DESTINATIONOUTOFREACH,
    RET_CREATUREBLOCK,
    RET_NOTMOVEABLE,
    RET_DROPTWOHANDEDITEM,
    RET_BOTHHANDSNEEDTOBEFREE,
    RET_CANONLYUSEONEWEAPON,
    RET_NEEDEXCHANGE,
    RET_CANNOTBEDRESSED,
    RET_PUTTHISOBJECTINYOURHAND,
    RET_PUTTHISOBJECTINBOTHHANDS,
    RET_ITEMOUTORANGE,
    RET_NEEDTOPICKUPITEM,
    RET_NEEDTOMOVETOTARGET,
    RET_FIRSTGODOWNSTAIRS,
    RET_FIRSTGOUPSTAIRS,
    RET_CONTAINERNOTENOUGHROOM,
    RET_NOTENOUGHCAPACITY,
    RET_CANNOTPICKUP,
    RET_THISISIMPOSSIBLE,
    RET_DEPOTISFULL,
    RET_CREATUREDOESNOTEXIST,
    RET_CANNOTUSETHISOBJECT,
    RET_PLAYERWITHTHISNAMEISNOTONLINE,
    RET_NOTREQUIREDLEVELTOUSERUNE,
    RET_YOUAREALREADYTRADING,
    RET_THISPLAYERISALREADYTRADING,
    RET_YOUMAYNOTLOGOUTDURINGAFIGHT,
    RET_DIRECTPLAYERSHOOT,
    RET_NOTENOUGHLEVEL,
    RET_NOTENOUGHMAGICLEVEL,
    RET_NOTENOUGHMANA,
    RET_NOTENOUGHSOUL,
    RET_YOUAREEXHAUSTED,
    RET_PLAYERISNOTREACHABLE,
    RET_CANONLYUSETHISRUNEONCREATURES,
    RET_ACTIONNOTPERMITTEDINPROTECTIONZONE,
    RET_YOUMAYNOTATTACKTHISPERSON,
    RET_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE,
    RET_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE,
    RET_YOUMAYNOTATTACKTHISCREATURE,
    RET_YOUCANONLYUSEITONCREATURES,
    RET_CREATUREISNOTREACHABLE,
    RET_TURNSECUREMODETOATTACKUNMARKEDPLAYERS,
    RET_YOUNEEDPREMIUMACCOUNT,
    RET_YOUNEEDTOLEARNTHISSPELL,
    RET_YOURVOCATIONCANNOTUSETHISSPELL,
    RET_YOUNEEDAWEAPONTOUSETHISSPELL,
    RET_PLAYERISPZLOCKEDLEAVEPVPZONE,
    RET_PLAYERISPZLOCKEDENTERPVPZONE,
    RET_ACTIONNOTPERMITTEDINANONPVPZONE,
    RET_YOUCANNOTLOGOUTHERE,
    RET_YOUNEEDAMAGICITEMTOCASTSPELL,
    RET_CANNOTCONJUREITEMHERE,
    RET_YOUNEEDTOSPLITYOURSPEARS,
    RET_NAMEISTOOAMBIGIOUS,
    RET_CANONLYUSEONESHIELD,
    RET_YOUARENOTTHEOWNER,
    RET_NOTREQUIREDPROFESSION,
    RET_NOTREQUIREDLEVEL,
    RET_NEEDPREMIUMTOEQUIPITEM,
  }; // end enum
} // end namespace

typedef Enum<enums::ReturnValue, enums::RET_NEEDPREMIUMTOEQUIPITEM + 1> ReturnValue;

typedef Enum<enums::ReturnValue, enums::RET_NEEDPREMIUMTOEQUIPITEM + 1> ReturnValue__Base;

//begin enum definitions
  const ReturnValue RET_NOERROR(enums::RET_NOERROR);
  const ReturnValue RET_NOTPOSSIBLE(enums::RET_NOTPOSSIBLE);
  const ReturnValue RET_NOTENOUGHROOM(enums::RET_NOTENOUGHROOM);
  const ReturnValue RET_PLAYERISPZLOCKED(enums::RET_PLAYERISPZLOCKED);
  const ReturnValue RET_PLAYERISNOTINVITED(enums::RET_PLAYERISNOTINVITED);
  const ReturnValue RET_CANNOTTHROW(enums::RET_CANNOTTHROW);
  const ReturnValue RET_THEREISNOWAY(enums::RET_THEREISNOWAY);
  const ReturnValue RET_DESTINATIONOUTOFREACH(enums::RET_DESTINATIONOUTOFREACH);
  const ReturnValue RET_CREATUREBLOCK(enums::RET_CREATUREBLOCK);
  const ReturnValue RET_NOTMOVEABLE(enums::RET_NOTMOVEABLE);
  const ReturnValue RET_DROPTWOHANDEDITEM(enums::RET_DROPTWOHANDEDITEM);
  const ReturnValue RET_BOTHHANDSNEEDTOBEFREE(enums::RET_BOTHHANDSNEEDTOBEFREE);
  const ReturnValue RET_CANONLYUSEONEWEAPON(enums::RET_CANONLYUSEONEWEAPON);
  const ReturnValue RET_NEEDEXCHANGE(enums::RET_NEEDEXCHANGE);
  const ReturnValue RET_CANNOTBEDRESSED(enums::RET_CANNOTBEDRESSED);
  const ReturnValue RET_PUTTHISOBJECTINYOURHAND(enums::RET_PUTTHISOBJECTINYOURHAND);
  const ReturnValue RET_PUTTHISOBJECTINBOTHHANDS(enums::RET_PUTTHISOBJECTINBOTHHANDS);
  const ReturnValue RET_ITEMOUTORANGE(enums::RET_ITEMOUTORANGE);
  const ReturnValue RET_NEEDTOPICKUPITEM(enums::RET_NEEDTOPICKUPITEM);
  const ReturnValue RET_NEEDTOMOVETOTARGET(enums::RET_NEEDTOMOVETOTARGET);
  const ReturnValue RET_FIRSTGODOWNSTAIRS(enums::RET_FIRSTGODOWNSTAIRS);
  const ReturnValue RET_FIRSTGOUPSTAIRS(enums::RET_FIRSTGOUPSTAIRS);
  const ReturnValue RET_CONTAINERNOTENOUGHROOM(enums::RET_CONTAINERNOTENOUGHROOM);
  const ReturnValue RET_NOTENOUGHCAPACITY(enums::RET_NOTENOUGHCAPACITY);
  const ReturnValue RET_CANNOTPICKUP(enums::RET_CANNOTPICKUP);
  const ReturnValue RET_THISISIMPOSSIBLE(enums::RET_THISISIMPOSSIBLE);
  const ReturnValue RET_DEPOTISFULL(enums::RET_DEPOTISFULL);
  const ReturnValue RET_CREATUREDOESNOTEXIST(enums::RET_CREATUREDOESNOTEXIST);
  const ReturnValue RET_CANNOTUSETHISOBJECT(enums::RET_CANNOTUSETHISOBJECT);
  const ReturnValue RET_PLAYERWITHTHISNAMEISNOTONLINE(enums::RET_PLAYERWITHTHISNAMEISNOTONLINE);
  const ReturnValue RET_NOTREQUIREDLEVELTOUSERUNE(enums::RET_NOTREQUIREDLEVELTOUSERUNE);
  const ReturnValue RET_YOUAREALREADYTRADING(enums::RET_YOUAREALREADYTRADING);
  const ReturnValue RET_THISPLAYERISALREADYTRADING(enums::RET_THISPLAYERISALREADYTRADING);
  const ReturnValue RET_YOUMAYNOTLOGOUTDURINGAFIGHT(enums::RET_YOUMAYNOTLOGOUTDURINGAFIGHT);
  const ReturnValue RET_DIRECTPLAYERSHOOT(enums::RET_DIRECTPLAYERSHOOT);
  const ReturnValue RET_NOTENOUGHLEVEL(enums::RET_NOTENOUGHLEVEL);
  const ReturnValue RET_NOTENOUGHMAGICLEVEL(enums::RET_NOTENOUGHMAGICLEVEL);
  const ReturnValue RET_NOTENOUGHMANA(enums::RET_NOTENOUGHMANA);
  const ReturnValue RET_NOTENOUGHSOUL(enums::RET_NOTENOUGHSOUL);
  const ReturnValue RET_YOUAREEXHAUSTED(enums::RET_YOUAREEXHAUSTED);
  const ReturnValue RET_PLAYERISNOTREACHABLE(enums::RET_PLAYERISNOTREACHABLE);
  const ReturnValue RET_CANONLYUSETHISRUNEONCREATURES(enums::RET_CANONLYUSETHISRUNEONCREATURES);
  const ReturnValue RET_ACTIONNOTPERMITTEDINPROTECTIONZONE(enums::RET_ACTIONNOTPERMITTEDINPROTECTIONZONE);
  const ReturnValue RET_YOUMAYNOTATTACKTHISPERSON(enums::RET_YOUMAYNOTATTACKTHISPERSON);
  const ReturnValue RET_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE(enums::RET_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE);
  const ReturnValue RET_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE(enums::RET_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE);
  const ReturnValue RET_YOUMAYNOTATTACKTHISCREATURE(enums::RET_YOUMAYNOTATTACKTHISCREATURE);
  const ReturnValue RET_YOUCANONLYUSEITONCREATURES(enums::RET_YOUCANONLYUSEITONCREATURES);
  const ReturnValue RET_CREATUREISNOTREACHABLE(enums::RET_CREATUREISNOTREACHABLE);
  const ReturnValue RET_TURNSECUREMODETOATTACKUNMARKEDPLAYERS(enums::RET_TURNSECUREMODETOATTACKUNMARKEDPLAYERS);
  const ReturnValue RET_YOUNEEDPREMIUMACCOUNT(enums::RET_YOUNEEDPREMIUMACCOUNT);
  const ReturnValue RET_YOUNEEDTOLEARNTHISSPELL(enums::RET_YOUNEEDTOLEARNTHISSPELL);
  const ReturnValue RET_YOURVOCATIONCANNOTUSETHISSPELL(enums::RET_YOURVOCATIONCANNOTUSETHISSPELL);
  const ReturnValue RET_YOUNEEDAWEAPONTOUSETHISSPELL(enums::RET_YOUNEEDAWEAPONTOUSETHISSPELL);
  const ReturnValue RET_PLAYERISPZLOCKEDLEAVEPVPZONE(enums::RET_PLAYERISPZLOCKEDLEAVEPVPZONE);
  const ReturnValue RET_PLAYERISPZLOCKEDENTERPVPZONE(enums::RET_PLAYERISPZLOCKEDENTERPVPZONE);
  const ReturnValue RET_ACTIONNOTPERMITTEDINANONPVPZONE(enums::RET_ACTIONNOTPERMITTEDINANONPVPZONE);
  const ReturnValue RET_YOUCANNOTLOGOUTHERE(enums::RET_YOUCANNOTLOGOUTHERE);
  const ReturnValue RET_YOUNEEDAMAGICITEMTOCASTSPELL(enums::RET_YOUNEEDAMAGICITEMTOCASTSPELL);
  const ReturnValue RET_CANNOTCONJUREITEMHERE(enums::RET_CANNOTCONJUREITEMHERE);
  const ReturnValue RET_YOUNEEDTOSPLITYOURSPEARS(enums::RET_YOUNEEDTOSPLITYOURSPEARS);
  const ReturnValue RET_NAMEISTOOAMBIGIOUS(enums::RET_NAMEISTOOAMBIGIOUS);
  const ReturnValue RET_CANONLYUSEONESHIELD(enums::RET_CANONLYUSEONESHIELD);
  const ReturnValue RET_YOUARENOTTHEOWNER(enums::RET_YOUARENOTTHEOWNER);
  const ReturnValue RET_NOTREQUIREDPROFESSION(enums::RET_NOTREQUIREDPROFESSION);
  const ReturnValue RET_NOTREQUIREDLEVEL(enums::RET_NOTREQUIREDLEVEL);
  const ReturnValue RET_NEEDPREMIUMTOEQUIPITEM(enums::RET_NEEDPREMIUMTOEQUIPITEM);
//end enum definitions

namespace enums {
  enum MagicEffect {
    MAGIC_EFFECT_RED_SPARK = 0x00,
    MAGIC_EFFECT_BLUE_RING = 0x01,
    MAGIC_EFFECT_PUFF = 0x02,
    MAGIC_EFFECT_YELLOW_SPARK = 0x03,
    MAGIC_EFFECT_EXPLOSION_AREA = 0x04,
    MAGIC_EFFECT_EXPLOSION_HIT = 0x05,
    MAGIC_EFFECT_FIRE_AREA = 0x06,
    MAGIC_EFFECT_YELLOW_RING = 0x07,
    MAGIC_EFFECT_GREEN_RING = 0x08,
    MAGIC_EFFECT_BLACK_SPARK = 0x09,
    MAGIC_EFFECT_BLUE_BUBBLE = 0x0A,
    MAGIC_EFFECT_ENERGY_HIT = 0x0B,
    MAGIC_EFFECT_BLUE_SHIMMER = 0x0C,
    MAGIC_EFFECT_RED_SHIMMER = 0x0D,
    MAGIC_EFFECT_GREEN_SHIMMER = 0x0E,
    MAGIC_EFFECT_FIRE_HIT = 0x0F,
    MAGIC_EFFECT_GREEN_SPARK = 0x10,
    MAGIC_EFFECT_DEATH_AREA = 0x11,
    MAGIC_EFFECT_GREEN_NOTE = 0x12,
    MAGIC_EFFECT_RED_NOTE = 0x13,
    MAGIC_EFFECT_POISON_AREA = 0x14,
    MAGIC_EFFECT_YELLOW_NOTE = 0x15,
    MAGIC_EFFECT_PURPLE_NOTE = 0x16,
    MAGIC_EFFECT_BLUE_NOTE = 0x17,
    MAGIC_EFFECT_WHITE_NOTE = 0x18,
    MAGIC_EFFECT_BUBBLES = 0x19,
    MAGIC_EFFECT_DICE = 0x1A,
    MAGIC_EFFECT_GIFT_WRAPS = 0x1B,
    MAGIC_EFFECT_YELLOW_FIREWORK = 0x1C,
    MAGIC_EFFECT_RED_FIREWORK = 0x1D,
    MAGIC_EFFECT_BLUE_FIREWORK = 0x1E,
    MAGIC_EFFECT_STAR_RING = 0x1F,
    MAGIC_EFFECT_SLEEP = 0x20,
    MAGIC_EFFECT_WATERCREATURE = 0x21,
    MAGIC_EFFECT_GROUNDSHAKER = 0x22,
    MAGIC_EFFECT_HEART = 0x23,
    MAGIC_EFFECT_FIRE_SPARK = 0x24,
    MAGIC_EFFECT_ENERGY_AREA = 0x25,
    MAGIC_EFFECT_SMALLCLOUDS = 0x26,
    MAGIC_EFFECT_HOLY_HIT = 0x27,
    MAGIC_EFFECT_BIGCLOUDS = 0x28,
    MAGIC_EFFECT_ICE_AREA = 0x29,
    MAGIC_EFFECT_ICE_TORNADO = 0x2A,
    MAGIC_EFFECT_ICE_HIT = 0x2B,
    MAGIC_EFFECT_STONES = 0x2C,
    MAGIC_EFFECT_SMALLPLANTS = 0x2D,
    MAGIC_EFFECT_CARNIPHILA = 0x2E,
    MAGIC_EFFECT_PURPLE_ENERGY = 0x2F,
    MAGIC_EFFECT_YELLOW_ENERGY = 0x30,
    MAGIC_EFFECT_HOLY_AREA = 0x31,
    MAGIC_EFFECT_ROOTS = 0x32,
    MAGIC_EFFECT_CAKE = 0x33,
    MAGIC_EFFECT_ICE_SPIKE = 0x34,
    MAGIC_EFFECT_WATER_SPLASH = 0x35,
    MAGIC_EFFECT_GREEN_WHIRL = 0x36,
    MAGIC_EFFECT_TUTORIAL_ARROW = 0x37,
    MAGIC_EFFECT_TUTORIAL_SQUARE = 0x38,
    MAGIC_EFFECT_MIRROR_HORIZONTAL = 0x39,
    MAGIC_EFFECT_MIRROR_VERTICAL = 0x3A,
    MAGIC_EFFECT_SKULL_HORIZONTAL = 0x3B,
    MAGIC_EFFECT_SKULL_VERTICAL = 0x3C,
    MAGIC_EFFECT_ASSASSIN = 0x3D,
    MAGIC_EFFECT_BLOODSTEP_HORIZONTAL = 0x3E,
    MAGIC_EFFECT_BLOODSTEP = 0x3F,
    MAGIC_EFFECT_BLOODSTEP_VERTICAL = 0x40,
    MAGIC_EFFECT_GHOST = 0x41,
    MAGIC_EFFECT_BATS = 0x42,
    MAGIC_EFFECT_SMOKE = 0x43,
    MAGIC_EFFECT_INSECTS = 0x44,
    MAGIC_EFFECT_DRAGONHEAD = 0x45,
    MAGIC_EFFECT_NONE = 0xFF,
    MAGIC_EFFECT_UNK = 0xFFFF,
  }; // end enum
} // end namespace

typedef Enum<enums::MagicEffect, enums::MAGIC_EFFECT_UNK + 1> MagicEffect;

typedef Enum<enums::MagicEffect, enums::MAGIC_EFFECT_UNK + 1> MagicEffect__Base;

//begin enum definitions
  const MagicEffect MAGIC_EFFECT_RED_SPARK(enums::MAGIC_EFFECT_RED_SPARK);
  const MagicEffect MAGIC_EFFECT_BLUE_RING(enums::MAGIC_EFFECT_BLUE_RING);
  const MagicEffect MAGIC_EFFECT_PUFF(enums::MAGIC_EFFECT_PUFF);
  const MagicEffect MAGIC_EFFECT_YELLOW_SPARK(enums::MAGIC_EFFECT_YELLOW_SPARK);
  const MagicEffect MAGIC_EFFECT_EXPLOSION_AREA(enums::MAGIC_EFFECT_EXPLOSION_AREA);
  const MagicEffect MAGIC_EFFECT_EXPLOSION_HIT(enums::MAGIC_EFFECT_EXPLOSION_HIT);
  const MagicEffect MAGIC_EFFECT_FIRE_AREA(enums::MAGIC_EFFECT_FIRE_AREA);
  const MagicEffect MAGIC_EFFECT_YELLOW_RING(enums::MAGIC_EFFECT_YELLOW_RING);
  const MagicEffect MAGIC_EFFECT_GREEN_RING(enums::MAGIC_EFFECT_GREEN_RING);
  const MagicEffect MAGIC_EFFECT_BLACK_SPARK(enums::MAGIC_EFFECT_BLACK_SPARK);
  const MagicEffect MAGIC_EFFECT_BLUE_BUBBLE(enums::MAGIC_EFFECT_BLUE_BUBBLE);
  const MagicEffect MAGIC_EFFECT_ENERGY_HIT(enums::MAGIC_EFFECT_ENERGY_HIT);
  const MagicEffect MAGIC_EFFECT_BLUE_SHIMMER(enums::MAGIC_EFFECT_BLUE_SHIMMER);
  const MagicEffect MAGIC_EFFECT_RED_SHIMMER(enums::MAGIC_EFFECT_RED_SHIMMER);
  const MagicEffect MAGIC_EFFECT_GREEN_SHIMMER(enums::MAGIC_EFFECT_GREEN_SHIMMER);
  const MagicEffect MAGIC_EFFECT_FIRE_HIT(enums::MAGIC_EFFECT_FIRE_HIT);
  const MagicEffect MAGIC_EFFECT_GREEN_SPARK(enums::MAGIC_EFFECT_GREEN_SPARK);
  const MagicEffect MAGIC_EFFECT_DEATH_AREA(enums::MAGIC_EFFECT_DEATH_AREA);
  const MagicEffect MAGIC_EFFECT_GREEN_NOTE(enums::MAGIC_EFFECT_GREEN_NOTE);
  const MagicEffect MAGIC_EFFECT_RED_NOTE(enums::MAGIC_EFFECT_RED_NOTE);
  const MagicEffect MAGIC_EFFECT_POISON_AREA(enums::MAGIC_EFFECT_POISON_AREA);
  const MagicEffect MAGIC_EFFECT_YELLOW_NOTE(enums::MAGIC_EFFECT_YELLOW_NOTE);
  const MagicEffect MAGIC_EFFECT_PURPLE_NOTE(enums::MAGIC_EFFECT_PURPLE_NOTE);
  const MagicEffect MAGIC_EFFECT_BLUE_NOTE(enums::MAGIC_EFFECT_BLUE_NOTE);
  const MagicEffect MAGIC_EFFECT_WHITE_NOTE(enums::MAGIC_EFFECT_WHITE_NOTE);
  const MagicEffect MAGIC_EFFECT_BUBBLES(enums::MAGIC_EFFECT_BUBBLES);
  const MagicEffect MAGIC_EFFECT_DICE(enums::MAGIC_EFFECT_DICE);
  const MagicEffect MAGIC_EFFECT_GIFT_WRAPS(enums::MAGIC_EFFECT_GIFT_WRAPS);
  const MagicEffect MAGIC_EFFECT_YELLOW_FIREWORK(enums::MAGIC_EFFECT_YELLOW_FIREWORK);
  const MagicEffect MAGIC_EFFECT_RED_FIREWORK(enums::MAGIC_EFFECT_RED_FIREWORK);
  const MagicEffect MAGIC_EFFECT_BLUE_FIREWORK(enums::MAGIC_EFFECT_BLUE_FIREWORK);
  const MagicEffect MAGIC_EFFECT_STAR_RING(enums::MAGIC_EFFECT_STAR_RING);
  const MagicEffect MAGIC_EFFECT_SLEEP(enums::MAGIC_EFFECT_SLEEP);
  const MagicEffect MAGIC_EFFECT_WATERCREATURE(enums::MAGIC_EFFECT_WATERCREATURE);
  const MagicEffect MAGIC_EFFECT_GROUNDSHAKER(enums::MAGIC_EFFECT_GROUNDSHAKER);
  const MagicEffect MAGIC_EFFECT_HEART(enums::MAGIC_EFFECT_HEART);
  const MagicEffect MAGIC_EFFECT_FIRE_SPARK(enums::MAGIC_EFFECT_FIRE_SPARK);
  const MagicEffect MAGIC_EFFECT_ENERGY_AREA(enums::MAGIC_EFFECT_ENERGY_AREA);
  const MagicEffect MAGIC_EFFECT_SMALLCLOUDS(enums::MAGIC_EFFECT_SMALLCLOUDS);
  const MagicEffect MAGIC_EFFECT_HOLY_HIT(enums::MAGIC_EFFECT_HOLY_HIT);
  const MagicEffect MAGIC_EFFECT_BIGCLOUDS(enums::MAGIC_EFFECT_BIGCLOUDS);
  const MagicEffect MAGIC_EFFECT_ICE_AREA(enums::MAGIC_EFFECT_ICE_AREA);
  const MagicEffect MAGIC_EFFECT_ICE_TORNADO(enums::MAGIC_EFFECT_ICE_TORNADO);
  const MagicEffect MAGIC_EFFECT_ICE_HIT(enums::MAGIC_EFFECT_ICE_HIT);
  const MagicEffect MAGIC_EFFECT_STONES(enums::MAGIC_EFFECT_STONES);
  const MagicEffect MAGIC_EFFECT_SMALLPLANTS(enums::MAGIC_EFFECT_SMALLPLANTS);
  const MagicEffect MAGIC_EFFECT_CARNIPHILA(enums::MAGIC_EFFECT_CARNIPHILA);
  const MagicEffect MAGIC_EFFECT_PURPLE_ENERGY(enums::MAGIC_EFFECT_PURPLE_ENERGY);
  const MagicEffect MAGIC_EFFECT_YELLOW_ENERGY(enums::MAGIC_EFFECT_YELLOW_ENERGY);
  const MagicEffect MAGIC_EFFECT_HOLY_AREA(enums::MAGIC_EFFECT_HOLY_AREA);
  const MagicEffect MAGIC_EFFECT_ROOTS(enums::MAGIC_EFFECT_ROOTS);
  const MagicEffect MAGIC_EFFECT_CAKE(enums::MAGIC_EFFECT_CAKE);
  const MagicEffect MAGIC_EFFECT_ICE_SPIKE(enums::MAGIC_EFFECT_ICE_SPIKE);
  const MagicEffect MAGIC_EFFECT_WATER_SPLASH(enums::MAGIC_EFFECT_WATER_SPLASH);
  const MagicEffect MAGIC_EFFECT_GREEN_WHIRL(enums::MAGIC_EFFECT_GREEN_WHIRL);
  const MagicEffect MAGIC_EFFECT_TUTORIAL_ARROW(enums::MAGIC_EFFECT_TUTORIAL_ARROW);
  const MagicEffect MAGIC_EFFECT_TUTORIAL_SQUARE(enums::MAGIC_EFFECT_TUTORIAL_SQUARE);
  const MagicEffect MAGIC_EFFECT_MIRROR_HORIZONTAL(enums::MAGIC_EFFECT_MIRROR_HORIZONTAL);
  const MagicEffect MAGIC_EFFECT_MIRROR_VERTICAL(enums::MAGIC_EFFECT_MIRROR_VERTICAL);
  const MagicEffect MAGIC_EFFECT_SKULL_HORIZONTAL(enums::MAGIC_EFFECT_SKULL_HORIZONTAL);
  const MagicEffect MAGIC_EFFECT_SKULL_VERTICAL(enums::MAGIC_EFFECT_SKULL_VERTICAL);
  const MagicEffect MAGIC_EFFECT_ASSASSIN(enums::MAGIC_EFFECT_ASSASSIN);
  const MagicEffect MAGIC_EFFECT_BLOODSTEP_HORIZONTAL(enums::MAGIC_EFFECT_BLOODSTEP_HORIZONTAL);
  const MagicEffect MAGIC_EFFECT_BLOODSTEP(enums::MAGIC_EFFECT_BLOODSTEP);
  const MagicEffect MAGIC_EFFECT_BLOODSTEP_VERTICAL(enums::MAGIC_EFFECT_BLOODSTEP_VERTICAL);
  const MagicEffect MAGIC_EFFECT_GHOST(enums::MAGIC_EFFECT_GHOST);
  const MagicEffect MAGIC_EFFECT_BATS(enums::MAGIC_EFFECT_BATS);
  const MagicEffect MAGIC_EFFECT_SMOKE(enums::MAGIC_EFFECT_SMOKE);
  const MagicEffect MAGIC_EFFECT_INSECTS(enums::MAGIC_EFFECT_INSECTS);
  const MagicEffect MAGIC_EFFECT_DRAGONHEAD(enums::MAGIC_EFFECT_DRAGONHEAD);
  const MagicEffect MAGIC_EFFECT_NONE(enums::MAGIC_EFFECT_NONE);
  const MagicEffect MAGIC_EFFECT_UNK(enums::MAGIC_EFFECT_UNK);
//end enum definitions

namespace enums {
  enum ShootEffect {
    SHOOT_EFFECT_SPEAR = 0x00,
    SHOOT_EFFECT_BOLT = 0x01,
    SHOOT_EFFECT_ARROW = 0x02,
    SHOOT_EFFECT_FIRE = 0x03,
    SHOOT_EFFECT_ENERGY = 0x04,
    SHOOT_EFFECT_POISONARROW = 0x05,
    SHOOT_EFFECT_BURSTARROW = 0x06,
    SHOOT_EFFECT_THROWINGSTAR = 0x07,
    SHOOT_EFFECT_THROWINGKNIFE = 0x08,
    SHOOT_EFFECT_SMALLSTONE = 0x09,
    SHOOT_EFFECT_DEATH = 0x0A,
    SHOOT_EFFECT_LARGEROCK = 0x0B,
    SHOOT_EFFECT_SNOWBALL = 0x0C,
    SHOOT_EFFECT_POWERBOLT = 0x0D,
    SHOOT_EFFECT_POISONFIELD = 0x0E,
    SHOOT_EFFECT_INFERNALBOLT = 0x0F,
    SHOOT_EFFECT_HUNTINGSPEAR = 0x10,
    SHOOT_EFFECT_ENCHANTEDSPEAR = 0x11,
    SHOOT_EFFECT_REDSTAR = 0x12,
    SHOOT_EFFECT_GREENSTAR = 0x13,
    SHOOT_EFFECT_ROYALSPEAR = 0x14,
    SHOOT_EFFECT_SNIPERARROW = 0x15,
    SHOOT_EFFECT_ONYXARROW = 0x16,
    SHOOT_EFFECT_PIERCINGBOLT = 0x17,
    SHOOT_EFFECT_WHIRLWINDSWORD = 0x18,
    SHOOT_EFFECT_WHIRLWINDAXE = 0x19,
    SHOOT_EFFECT_WHIRLWINDCLUB = 0x1A,
    SHOOT_EFFECT_ETHEREALSPEAR = 0x1B,
    SHOOT_EFFECT_ICE = 0x1C,
    SHOOT_EFFECT_EARTH = 0x1D,
    SHOOT_EFFECT_HOLY = 0x1E,
    SHOOT_EFFECT_SUDDENDEATH = 0x1F,
    SHOOT_EFFECT_FLASHARROW = 0x20,
    SHOOT_EFFECT_FLAMINGARROW = 0x21,
    SHOOT_EFFECT_SHIVERARROW = 0x22,
    SHOOT_EFFECT_ENERGYBALL = 0x23,
    SHOOT_EFFECT_SMALLICE = 0x24,
    SHOOT_EFFECT_SMALLHOLY = 0x25,
    SHOOT_EFFECT_SMALLEARTH = 0x26,
    SHOOT_EFFECT_EARTHARROW = 0x27,
    SHOOT_EFFECT_EXPLOSION = 0x28,
    SHOOT_EFFECT_CAKE = 0x29,
    SHOOT_EFFECT_WEAPONTYPE = 0xFE,
    SHOOT_EFFECT_NONE = 0xFF,
    SHOOT_EFFECT_UNK = 0xFFFF,
  }; // end enum
} // end namespace

typedef Enum<enums::ShootEffect, enums::SHOOT_EFFECT_UNK + 1> ShootEffect;

typedef Enum<enums::ShootEffect, enums::SHOOT_EFFECT_UNK + 1> ShootEffect__Base;

//begin enum definitions
  const ShootEffect SHOOT_EFFECT_SPEAR(enums::SHOOT_EFFECT_SPEAR);
  const ShootEffect SHOOT_EFFECT_BOLT(enums::SHOOT_EFFECT_BOLT);
  const ShootEffect SHOOT_EFFECT_ARROW(enums::SHOOT_EFFECT_ARROW);
  const ShootEffect SHOOT_EFFECT_FIRE(enums::SHOOT_EFFECT_FIRE);
  const ShootEffect SHOOT_EFFECT_ENERGY(enums::SHOOT_EFFECT_ENERGY);
  const ShootEffect SHOOT_EFFECT_POISONARROW(enums::SHOOT_EFFECT_POISONARROW);
  const ShootEffect SHOOT_EFFECT_BURSTARROW(enums::SHOOT_EFFECT_BURSTARROW);
  const ShootEffect SHOOT_EFFECT_THROWINGSTAR(enums::SHOOT_EFFECT_THROWINGSTAR);
  const ShootEffect SHOOT_EFFECT_THROWINGKNIFE(enums::SHOOT_EFFECT_THROWINGKNIFE);
  const ShootEffect SHOOT_EFFECT_SMALLSTONE(enums::SHOOT_EFFECT_SMALLSTONE);
  const ShootEffect SHOOT_EFFECT_DEATH(enums::SHOOT_EFFECT_DEATH);
  const ShootEffect SHOOT_EFFECT_LARGEROCK(enums::SHOOT_EFFECT_LARGEROCK);
  const ShootEffect SHOOT_EFFECT_SNOWBALL(enums::SHOOT_EFFECT_SNOWBALL);
  const ShootEffect SHOOT_EFFECT_POWERBOLT(enums::SHOOT_EFFECT_POWERBOLT);
  const ShootEffect SHOOT_EFFECT_POISONFIELD(enums::SHOOT_EFFECT_POISONFIELD);
  const ShootEffect SHOOT_EFFECT_INFERNALBOLT(enums::SHOOT_EFFECT_INFERNALBOLT);
  const ShootEffect SHOOT_EFFECT_HUNTINGSPEAR(enums::SHOOT_EFFECT_HUNTINGSPEAR);
  const ShootEffect SHOOT_EFFECT_ENCHANTEDSPEAR(enums::SHOOT_EFFECT_ENCHANTEDSPEAR);
  const ShootEffect SHOOT_EFFECT_REDSTAR(enums::SHOOT_EFFECT_REDSTAR);
  const ShootEffect SHOOT_EFFECT_GREENSTAR(enums::SHOOT_EFFECT_GREENSTAR);
  const ShootEffect SHOOT_EFFECT_ROYALSPEAR(enums::SHOOT_EFFECT_ROYALSPEAR);
  const ShootEffect SHOOT_EFFECT_SNIPERARROW(enums::SHOOT_EFFECT_SNIPERARROW);
  const ShootEffect SHOOT_EFFECT_ONYXARROW(enums::SHOOT_EFFECT_ONYXARROW);
  const ShootEffect SHOOT_EFFECT_PIERCINGBOLT(enums::SHOOT_EFFECT_PIERCINGBOLT);
  const ShootEffect SHOOT_EFFECT_WHIRLWINDSWORD(enums::SHOOT_EFFECT_WHIRLWINDSWORD);
  const ShootEffect SHOOT_EFFECT_WHIRLWINDAXE(enums::SHOOT_EFFECT_WHIRLWINDAXE);
  const ShootEffect SHOOT_EFFECT_WHIRLWINDCLUB(enums::SHOOT_EFFECT_WHIRLWINDCLUB);
  const ShootEffect SHOOT_EFFECT_ETHEREALSPEAR(enums::SHOOT_EFFECT_ETHEREALSPEAR);
  const ShootEffect SHOOT_EFFECT_ICE(enums::SHOOT_EFFECT_ICE);
  const ShootEffect SHOOT_EFFECT_EARTH(enums::SHOOT_EFFECT_EARTH);
  const ShootEffect SHOOT_EFFECT_HOLY(enums::SHOOT_EFFECT_HOLY);
  const ShootEffect SHOOT_EFFECT_SUDDENDEATH(enums::SHOOT_EFFECT_SUDDENDEATH);
  const ShootEffect SHOOT_EFFECT_FLASHARROW(enums::SHOOT_EFFECT_FLASHARROW);
  const ShootEffect SHOOT_EFFECT_FLAMINGARROW(enums::SHOOT_EFFECT_FLAMINGARROW);
  const ShootEffect SHOOT_EFFECT_SHIVERARROW(enums::SHOOT_EFFECT_SHIVERARROW);
  const ShootEffect SHOOT_EFFECT_ENERGYBALL(enums::SHOOT_EFFECT_ENERGYBALL);
  const ShootEffect SHOOT_EFFECT_SMALLICE(enums::SHOOT_EFFECT_SMALLICE);
  const ShootEffect SHOOT_EFFECT_SMALLHOLY(enums::SHOOT_EFFECT_SMALLHOLY);
  const ShootEffect SHOOT_EFFECT_SMALLEARTH(enums::SHOOT_EFFECT_SMALLEARTH);
  const ShootEffect SHOOT_EFFECT_EARTHARROW(enums::SHOOT_EFFECT_EARTHARROW);
  const ShootEffect SHOOT_EFFECT_EXPLOSION(enums::SHOOT_EFFECT_EXPLOSION);
  const ShootEffect SHOOT_EFFECT_CAKE(enums::SHOOT_EFFECT_CAKE);
  const ShootEffect SHOOT_EFFECT_WEAPONTYPE(enums::SHOOT_EFFECT_WEAPONTYPE);
  const ShootEffect SHOOT_EFFECT_NONE(enums::SHOOT_EFFECT_NONE);
  const ShootEffect SHOOT_EFFECT_UNK(enums::SHOOT_EFFECT_UNK);
//end enum definitions

namespace enums {
  enum SpeakClass {
    SPEAK_SAY = 0x01,
    SPEAK_WHISPER = 0x02,
    SPEAK_YELL = 0x03,
    SPEAK_PRIVATE_PN = 0x04,
    SPEAK_PRIVATE_NP = 0x05,
    SPEAK_PRIVATE = 0x06,
    SPEAK_CHANNEL_Y = 0x07,
    SPEAK_CHANNEL_W = 0x08,
    SPEAK_BROADCAST = 0x09,
    SPEAK_CHANNEL_R1 = 0x0A,
    SPEAK_PRIVATE_RED = 0x0B,
    SPEAK_CHANNEL_O = 0x0C,
    SPEAK_MONSTER_SAY = 0x0D,
    SPEAK_MONSTER_YELL = 0x0E,
  }; // end enum
} // end namespace

typedef Enum<enums::SpeakClass, enums::SPEAK_MONSTER_YELL + 1> SpeakClass;

typedef Enum<enums::SpeakClass, enums::SPEAK_MONSTER_YELL + 1> SpeakClass__Base;

//begin enum definitions
  const SpeakClass SPEAK_SAY(enums::SPEAK_SAY);
  const SpeakClass SPEAK_WHISPER(enums::SPEAK_WHISPER);
  const SpeakClass SPEAK_YELL(enums::SPEAK_YELL);
  const SpeakClass SPEAK_PRIVATE_PN(enums::SPEAK_PRIVATE_PN);
  const SpeakClass SPEAK_PRIVATE_NP(enums::SPEAK_PRIVATE_NP);
  const SpeakClass SPEAK_PRIVATE(enums::SPEAK_PRIVATE);
  const SpeakClass SPEAK_CHANNEL_Y(enums::SPEAK_CHANNEL_Y);
  const SpeakClass SPEAK_CHANNEL_W(enums::SPEAK_CHANNEL_W);
  const SpeakClass SPEAK_BROADCAST(enums::SPEAK_BROADCAST);
  const SpeakClass SPEAK_CHANNEL_R1(enums::SPEAK_CHANNEL_R1);
  const SpeakClass SPEAK_PRIVATE_RED(enums::SPEAK_PRIVATE_RED);
  const SpeakClass SPEAK_CHANNEL_O(enums::SPEAK_CHANNEL_O);
  const SpeakClass SPEAK_MONSTER_SAY(enums::SPEAK_MONSTER_SAY);
  const SpeakClass SPEAK_MONSTER_YELL(enums::SPEAK_MONSTER_YELL);
//end enum definitions

namespace enums {
  enum MessageClass {
    MSG_CLASS_FIRST = 0x0D,
    MSG_STATUS_CONSOLE_ORANGE2 = MSG_CLASS_FIRST,
    MSG_STATUS_CONSOLE_ORANGE = 0x0E,
    MSG_STATUS_WARNING = 0x0F,
    MSG_EVENT_ADVANCE = 0x10,
    MSG_EVENT_DEFAULT = 0x11,
    MSG_STATUS_DEFAULT = 0x12,
    MSG_INFO_DESCR = 0x13,
    MSG_STATUS_SMALL = 0x14,
    MSG_STATUS_CONSOLE_BLUE = 0x15,
    MSG_STATUS_CONSOLE_RED = 0x16,
    MSG_CLASS_LAST = MSG_STATUS_CONSOLE_RED,
  }; // end enum
} // end namespace

typedef Enum<enums::MessageClass, enums::MSG_CLASS_LAST + 1> MessageClass;

typedef Enum<enums::MessageClass, enums::MSG_CLASS_LAST + 1> MessageClass__Base;

//begin enum definitions
  const MessageClass MSG_CLASS_FIRST(enums::MSG_CLASS_FIRST);
  const MessageClass MSG_STATUS_CONSOLE_ORANGE2(enums::MSG_STATUS_CONSOLE_ORANGE2);
  const MessageClass MSG_STATUS_CONSOLE_ORANGE(enums::MSG_STATUS_CONSOLE_ORANGE);
  const MessageClass MSG_STATUS_WARNING(enums::MSG_STATUS_WARNING);
  const MessageClass MSG_EVENT_ADVANCE(enums::MSG_EVENT_ADVANCE);
  const MessageClass MSG_EVENT_DEFAULT(enums::MSG_EVENT_DEFAULT);
  const MessageClass MSG_STATUS_DEFAULT(enums::MSG_STATUS_DEFAULT);
  const MessageClass MSG_INFO_DESCR(enums::MSG_INFO_DESCR);
  const MessageClass MSG_STATUS_SMALL(enums::MSG_STATUS_SMALL);
  const MessageClass MSG_STATUS_CONSOLE_BLUE(enums::MSG_STATUS_CONSOLE_BLUE);
  const MessageClass MSG_STATUS_CONSOLE_RED(enums::MSG_STATUS_CONSOLE_RED);
  const MessageClass MSG_CLASS_LAST(enums::MSG_CLASS_LAST);
//end enum definitions

namespace enums {
  enum FluidColor {
    FLUID_EMPTY = 0x00,
    FLUID_BLUE = 0x01,
    FLUID_RED = 0x02,
    FLUID_BROWN = 0x03,
    FLUID_GREEN = 0x04,
    FLUID_YELLOW = 0x05,
    FLUID_WHITE = 0x06,
    FLUID_PURPLE = 0x07,
  }; // end enum
} // end namespace

typedef Enum<enums::FluidColor, enums::FLUID_PURPLE + 1> FluidColor;

typedef Enum<enums::FluidColor, enums::FLUID_PURPLE + 1> FluidColor__Base;

//begin enum definitions
  const FluidColor FLUID_EMPTY(enums::FLUID_EMPTY);
  const FluidColor FLUID_BLUE(enums::FLUID_BLUE);
  const FluidColor FLUID_RED(enums::FLUID_RED);
  const FluidColor FLUID_BROWN(enums::FLUID_BROWN);
  const FluidColor FLUID_GREEN(enums::FLUID_GREEN);
  const FluidColor FLUID_YELLOW(enums::FLUID_YELLOW);
  const FluidColor FLUID_WHITE(enums::FLUID_WHITE);
  const FluidColor FLUID_PURPLE(enums::FLUID_PURPLE);
//end enum definitions

namespace enums {
  enum FluidType {
    FLUID_NONE = FLUID_EMPTY,
    FLUID_WATER = FLUID_BLUE,
    FLUID_BLOOD = FLUID_RED,
    FLUID_BEER = FLUID_BROWN,
    FLUID_SLIME = FLUID_GREEN,
    FLUID_LEMONADE = FLUID_YELLOW,
    FLUID_MILK = FLUID_WHITE,
    FLUID_MANA = FLUID_PURPLE,
    FLUID_LIFE = FLUID_RED + 8,
    FLUID_OIL = FLUID_BROWN + 8,
    FLUID_URINE = FLUID_YELLOW + 8,
    FLUID_COCONUTMILK = FLUID_WHITE + 8,
    FLUID_WINE = FLUID_PURPLE + 8,
    FLUID_MUD = FLUID_BROWN + 16,
    FLUID_FRUITJUICE = FLUID_YELLOW + 16,
    FLUID_LAVA = FLUID_RED + 24,
    FLUID_RUM = FLUID_BROWN + 24,
    FLUID_SWAMP = FLUID_GREEN + 24,
  }; // end enum
} // end namespace

typedef Enum<enums::FluidType, enums::FLUID_SWAMP + 1> FluidType;

typedef Enum<enums::FluidType, enums::FLUID_SWAMP + 1> FluidType__Base;

//begin enum definitions
  const FluidType FLUID_NONE(enums::FLUID_NONE);
  const FluidType FLUID_WATER(enums::FLUID_WATER);
  const FluidType FLUID_BLOOD(enums::FLUID_BLOOD);
  const FluidType FLUID_BEER(enums::FLUID_BEER);
  const FluidType FLUID_SLIME(enums::FLUID_SLIME);
  const FluidType FLUID_LEMONADE(enums::FLUID_LEMONADE);
  const FluidType FLUID_MILK(enums::FLUID_MILK);
  const FluidType FLUID_MANA(enums::FLUID_MANA);
  const FluidType FLUID_LIFE(enums::FLUID_LIFE);
  const FluidType FLUID_OIL(enums::FLUID_OIL);
  const FluidType FLUID_URINE(enums::FLUID_URINE);
  const FluidType FLUID_COCONUTMILK(enums::FLUID_COCONUTMILK);
  const FluidType FLUID_WINE(enums::FLUID_WINE);
  const FluidType FLUID_MUD(enums::FLUID_MUD);
  const FluidType FLUID_FRUITJUICE(enums::FLUID_FRUITJUICE);
  const FluidType FLUID_LAVA(enums::FLUID_LAVA);
  const FluidType FLUID_RUM(enums::FLUID_RUM);
  const FluidType FLUID_SWAMP(enums::FLUID_SWAMP);
//end enum definitions

//begin raw definitions

const FluidType reverseFluidMap[] = {
  FluidType(enums::FLUID_EMPTY),
  FluidType(enums::FLUID_WATER),
  FluidType(enums::FLUID_MANA),
  FluidType(enums::FLUID_BEER),
  FluidType(enums::FLUID_EMPTY),
  FluidType(enums::FLUID_BLOOD),
  FluidType(enums::FLUID_SLIME),
  FluidType(enums::FLUID_EMPTY),
  FluidType(enums::FLUID_LEMONADE),
  FluidType(enums::FLUID_MILK)
};
//end raw definitions

namespace enums {
  enum ClientFluidType {
    CLIENTFLUID_EMPTY = 0x00,
    CLIENTFLUID_BLUE = 0x01,
    CLIENTFLUID_PURPLE = 0x02,
    CLIENTFLUID_BROWN_1 = 0x03,
    CLIENTFLUID_BROWN_2 = 0x04,
    CLIENTFLUID_RED = 0x05,
    CLIENTFLUID_GREEN = 0x06,
    CLIENTFLUID_BROWN = 0x07,
    CLIENTFLUID_YELLOW = 0x08,
    CLIENTFLUID_WHITE = 0x09,
  }; // end enum
} // end namespace

typedef Enum<enums::ClientFluidType, enums::CLIENTFLUID_WHITE + 1> ClientFluidType;

typedef Enum<enums::ClientFluidType, enums::CLIENTFLUID_WHITE + 1> ClientFluidType__Base;

//begin enum definitions
  const ClientFluidType CLIENTFLUID_EMPTY(enums::CLIENTFLUID_EMPTY);
  const ClientFluidType CLIENTFLUID_BLUE(enums::CLIENTFLUID_BLUE);
  const ClientFluidType CLIENTFLUID_PURPLE(enums::CLIENTFLUID_PURPLE);
  const ClientFluidType CLIENTFLUID_BROWN_1(enums::CLIENTFLUID_BROWN_1);
  const ClientFluidType CLIENTFLUID_BROWN_2(enums::CLIENTFLUID_BROWN_2);
  const ClientFluidType CLIENTFLUID_RED(enums::CLIENTFLUID_RED);
  const ClientFluidType CLIENTFLUID_GREEN(enums::CLIENTFLUID_GREEN);
  const ClientFluidType CLIENTFLUID_BROWN(enums::CLIENTFLUID_BROWN);
  const ClientFluidType CLIENTFLUID_YELLOW(enums::CLIENTFLUID_YELLOW);
  const ClientFluidType CLIENTFLUID_WHITE(enums::CLIENTFLUID_WHITE);
//end enum definitions

//begin raw definitions

const ClientFluidType fluidMap[] = {
  enums::CLIENTFLUID_EMPTY,
  enums::CLIENTFLUID_BLUE,
  enums::CLIENTFLUID_RED,
  enums::CLIENTFLUID_BROWN_1,
  enums::CLIENTFLUID_GREEN,
  enums::CLIENTFLUID_YELLOW,
  enums::CLIENTFLUID_WHITE,
  enums::CLIENTFLUID_PURPLE
};
//end raw definitions

namespace enums {
  enum SquareColor {
    SQ_COLOR_NONE = 256,
    SQ_COLOR_BLACK = 0,
  }; // end enum
} // end namespace

typedef Enum<enums::SquareColor, enums::SQ_COLOR_BLACK + 1> SquareColor;

typedef Enum<enums::SquareColor, enums::SQ_COLOR_BLACK + 1> SquareColor__Base;

//begin enum definitions
  const SquareColor SQ_COLOR_NONE(enums::SQ_COLOR_NONE);
  const SquareColor SQ_COLOR_BLACK(enums::SQ_COLOR_BLACK);
//end enum definitions

namespace enums {
  enum TextColor {
    TEXTCOLOR_BLUE = 5,
    TEXTCOLOR_LIGHTBLUE = 35,
    TEXTCOLOR_LIGHTGREEN = 30,
    TEXTCOLOR_PURPLE = 83,
    TEXTCOLOR_LIGHTGREY = 129,
    TEXTCOLOR_DARKRED = 144,
    TEXTCOLOR_RED = 180,
    TEXTCOLOR_ORANGE = 198,
    TEXTCOLOR_YELLOW = 210,
    TEXTCOLOR_WHITE_EXP = 215,
    TEXTCOLOR_NONE = 255,
    TEXTCOLOR_UNK = 256,
  }; // end enum
} // end namespace

typedef Enum<enums::TextColor, enums::TEXTCOLOR_UNK + 1> TextColor;

typedef Enum<enums::TextColor, enums::TEXTCOLOR_UNK + 1> TextColor__Base;

//begin enum definitions
  const TextColor TEXTCOLOR_BLUE(enums::TEXTCOLOR_BLUE);
  const TextColor TEXTCOLOR_LIGHTBLUE(enums::TEXTCOLOR_LIGHTBLUE);
  const TextColor TEXTCOLOR_LIGHTGREEN(enums::TEXTCOLOR_LIGHTGREEN);
  const TextColor TEXTCOLOR_PURPLE(enums::TEXTCOLOR_PURPLE);
  const TextColor TEXTCOLOR_LIGHTGREY(enums::TEXTCOLOR_LIGHTGREY);
  const TextColor TEXTCOLOR_DARKRED(enums::TEXTCOLOR_DARKRED);
  const TextColor TEXTCOLOR_RED(enums::TEXTCOLOR_RED);
  const TextColor TEXTCOLOR_ORANGE(enums::TEXTCOLOR_ORANGE);
  const TextColor TEXTCOLOR_YELLOW(enums::TEXTCOLOR_YELLOW);
  const TextColor TEXTCOLOR_WHITE_EXP(enums::TEXTCOLOR_WHITE_EXP);
  const TextColor TEXTCOLOR_NONE(enums::TEXTCOLOR_NONE);
  const TextColor TEXTCOLOR_UNK(enums::TEXTCOLOR_UNK);
//end enum definitions

namespace enums {
  enum IconType {
    ICON_NONE = 0,
    ICON_POISON = 1,
    ICON_BURN = 2,
    ICON_ENERGY = 4,
    ICON_DRUNK = 8,
    ICON_MANASHIELD = 16,
    ICON_PARALYZE = 32,
    ICON_HASTE = 64,
    ICON_SWORDS = 128,
    ICON_DROWNING = 256,
    ICON_FREEZING = 512,
    ICON_DAZZLED = 1024,
    ICON_CURSED = 2048,
    ICON_PARTY_BUFF = 4096,
    ICON_PZBLOCK = 8192,
    ICON_PZ = 16384,
  }; // end enum
} // end namespace

typedef BitEnum<enums::IconType, 15> IconType;

typedef Enum<enums::IconType, 15> IconType__Base;

//begin enum definitions
  const IconType ICON_NONE(enums::ICON_NONE);
  const IconType ICON_POISON(enums::ICON_POISON);
  const IconType ICON_BURN(enums::ICON_BURN);
  const IconType ICON_ENERGY(enums::ICON_ENERGY);
  const IconType ICON_DRUNK(enums::ICON_DRUNK);
  const IconType ICON_MANASHIELD(enums::ICON_MANASHIELD);
  const IconType ICON_PARALYZE(enums::ICON_PARALYZE);
  const IconType ICON_HASTE(enums::ICON_HASTE);
  const IconType ICON_SWORDS(enums::ICON_SWORDS);
  const IconType ICON_DROWNING(enums::ICON_DROWNING);
  const IconType ICON_FREEZING(enums::ICON_FREEZING);
  const IconType ICON_DAZZLED(enums::ICON_DAZZLED);
  const IconType ICON_CURSED(enums::ICON_CURSED);
  const IconType ICON_PARTY_BUFF(enums::ICON_PARTY_BUFF);
  const IconType ICON_PZBLOCK(enums::ICON_PZBLOCK);
  const IconType ICON_PZ(enums::ICON_PZ);
//end enum definitions

namespace enums {
  enum WeaponType {
    WEAPON_NONE = 0,
    WEAPON_SWORD = 1,
    WEAPON_CLUB = 2,
    WEAPON_AXE = 3,
    WEAPON_SHIELD = 4,
    WEAPON_DIST = 5,
    WEAPON_WAND = 6,
    WEAPON_AMMO = 7,
  }; // end enum
} // end namespace

typedef Enum<enums::WeaponType, enums::WEAPON_AMMO + 1> WeaponType;

typedef Enum<enums::WeaponType, enums::WEAPON_AMMO + 1> WeaponType__Base;

//begin enum definitions
  const WeaponType WEAPON_NONE(enums::WEAPON_NONE);
  const WeaponType WEAPON_SWORD(enums::WEAPON_SWORD);
  const WeaponType WEAPON_CLUB(enums::WEAPON_CLUB);
  const WeaponType WEAPON_AXE(enums::WEAPON_AXE);
  const WeaponType WEAPON_SHIELD(enums::WEAPON_SHIELD);
  const WeaponType WEAPON_DIST(enums::WEAPON_DIST);
  const WeaponType WEAPON_WAND(enums::WEAPON_WAND);
  const WeaponType WEAPON_AMMO(enums::WEAPON_AMMO);
//end enum definitions

namespace enums {
  enum AmmunitionType {
    AMMO_NONE = 0,
    AMMO_BOLT = 1,
    AMMO_ARROW = 2,
    AMMO_SPEAR = 3,
    AMMO_THROWINGSTAR = 4,
    AMMO_THROWINGKNIFE = 5,
    AMMO_STONE = 6,
    AMMO_SNOWBALL = 7,
  }; // end enum
} // end namespace

typedef Enum<enums::AmmunitionType, enums::AMMO_SNOWBALL + 1> AmmunitionType;

typedef Enum<enums::AmmunitionType, enums::AMMO_SNOWBALL + 1> AmmunitionType__Base;

//begin enum definitions
  const AmmunitionType AMMO_NONE(enums::AMMO_NONE);
  const AmmunitionType AMMO_BOLT(enums::AMMO_BOLT);
  const AmmunitionType AMMO_ARROW(enums::AMMO_ARROW);
  const AmmunitionType AMMO_SPEAR(enums::AMMO_SPEAR);
  const AmmunitionType AMMO_THROWINGSTAR(enums::AMMO_THROWINGSTAR);
  const AmmunitionType AMMO_THROWINGKNIFE(enums::AMMO_THROWINGKNIFE);
  const AmmunitionType AMMO_STONE(enums::AMMO_STONE);
  const AmmunitionType AMMO_SNOWBALL(enums::AMMO_SNOWBALL);
//end enum definitions

namespace enums {
  enum AmmunitionAction {
    AMMOACTION_NONE,
    AMMOACTION_REMOVECOUNT,
    AMMOACTION_REMOVECHARGE,
    AMMOACTION_MOVE,
    AMMOACTION_MOVEBACK,
  }; // end enum
} // end namespace

typedef Enum<enums::AmmunitionAction, enums::AMMOACTION_MOVEBACK + 1> AmmunitionAction;

typedef Enum<enums::AmmunitionAction, enums::AMMOACTION_MOVEBACK + 1> AmmunitionAction__Base;

//begin enum definitions
  const AmmunitionAction AMMOACTION_NONE(enums::AMMOACTION_NONE);
  const AmmunitionAction AMMOACTION_REMOVECOUNT(enums::AMMOACTION_REMOVECOUNT);
  const AmmunitionAction AMMOACTION_REMOVECHARGE(enums::AMMOACTION_REMOVECHARGE);
  const AmmunitionAction AMMOACTION_MOVE(enums::AMMOACTION_MOVE);
  const AmmunitionAction AMMOACTION_MOVEBACK(enums::AMMOACTION_MOVEBACK);
//end enum definitions

namespace enums {
  enum WieldInformation {
    WIELDINFO_NONE = 0,
    WIELDINFO_LEVEL = 1,
    WIELDINFO_MAGLV = 2,
    WIELDINFO_VOCREQ = 4,
    WIELDINFO_PREMIUM  = 8,
  }; // end enum
} // end namespace

typedef BitEnum<enums::WieldInformation, 4> WieldInformation;

typedef Enum<enums::WieldInformation, 4> WieldInformation__Base;

//begin enum definitions
  const WieldInformation WIELDINFO_NONE(enums::WIELDINFO_NONE);
  const WieldInformation WIELDINFO_LEVEL(enums::WIELDINFO_LEVEL);
  const WieldInformation WIELDINFO_MAGLV(enums::WIELDINFO_MAGLV);
  const WieldInformation WIELDINFO_VOCREQ(enums::WIELDINFO_VOCREQ);
  const WieldInformation WIELDINFO_PREMIUM (enums::WIELDINFO_PREMIUM );
//end enum definitions

namespace enums {
  enum SkullType {
    SKULL_NONE = 0,
    SKULL_YELLOW = 1,
    SKULL_GREEN = 2,
    SKULL_WHITE = 3,
    SKULL_RED = 4,
    SKULL_BLACK = 5,
  }; // end enum
} // end namespace

typedef Enum<enums::SkullType, enums::SKULL_BLACK + 1> SkullType;

typedef Enum<enums::SkullType, enums::SKULL_BLACK + 1> SkullType__Base;

//begin enum definitions
  const SkullType SKULL_NONE(enums::SKULL_NONE);
  const SkullType SKULL_YELLOW(enums::SKULL_YELLOW);
  const SkullType SKULL_GREEN(enums::SKULL_GREEN);
  const SkullType SKULL_WHITE(enums::SKULL_WHITE);
  const SkullType SKULL_RED(enums::SKULL_RED);
  const SkullType SKULL_BLACK(enums::SKULL_BLACK);
//end enum definitions

namespace enums {
  enum PartyShieldType {
    SHIELD_NONE = 0,
    SHIELD_WHITEYELLOW = 1,
    SHIELD_WHITEBLUE = 2,
    SHIELD_BLUE = 3,
    SHIELD_YELLOW = 4,
    SHIELD_BLUE_SHAREDEXP = 5,
    SHIELD_YELLOW_SHAREDEXP = 6,
    SHIELD_BLUE_NOSHAREDEXP_BLINK = 7,
    SHIELD_YELLOW_NOSHAREDEXP_BLINK = 8,
    SHIELD_BLUE_NOSHAREDEXP = 9,
    SHIELD_YELLOW_NOSHAREDEXP = 10,
  }; // end enum
} // end namespace

typedef Enum<enums::PartyShieldType, enums::SHIELD_YELLOW_NOSHAREDEXP + 1> PartyShieldType;

typedef Enum<enums::PartyShieldType, enums::SHIELD_YELLOW_NOSHAREDEXP + 1> PartyShieldType__Base;

//begin enum definitions
  const PartyShieldType SHIELD_NONE(enums::SHIELD_NONE);
  const PartyShieldType SHIELD_WHITEYELLOW(enums::SHIELD_WHITEYELLOW);
  const PartyShieldType SHIELD_WHITEBLUE(enums::SHIELD_WHITEBLUE);
  const PartyShieldType SHIELD_BLUE(enums::SHIELD_BLUE);
  const PartyShieldType SHIELD_YELLOW(enums::SHIELD_YELLOW);
  const PartyShieldType SHIELD_BLUE_SHAREDEXP(enums::SHIELD_BLUE_SHAREDEXP);
  const PartyShieldType SHIELD_YELLOW_SHAREDEXP(enums::SHIELD_YELLOW_SHAREDEXP);
  const PartyShieldType SHIELD_BLUE_NOSHAREDEXP_BLINK(enums::SHIELD_BLUE_NOSHAREDEXP_BLINK);
  const PartyShieldType SHIELD_YELLOW_NOSHAREDEXP_BLINK(enums::SHIELD_YELLOW_NOSHAREDEXP_BLINK);
  const PartyShieldType SHIELD_BLUE_NOSHAREDEXP(enums::SHIELD_BLUE_NOSHAREDEXP);
  const PartyShieldType SHIELD_YELLOW_NOSHAREDEXP(enums::SHIELD_YELLOW_NOSHAREDEXP);
//end enum definitions

namespace enums {
  enum GuildEmblemType {
    EMBLEM_NONE = 0,
    EMBLEM_GREEN = 1,
    EMBLEM_RED = 2,
    EMBLEM_BLUE = 3,
  }; // end enum
} // end namespace

typedef Enum<enums::GuildEmblemType, enums::EMBLEM_BLUE + 1> GuildEmblemType;

typedef Enum<enums::GuildEmblemType, enums::EMBLEM_BLUE + 1> GuildEmblemType__Base;

//begin enum definitions
  const GuildEmblemType EMBLEM_NONE(enums::EMBLEM_NONE);
  const GuildEmblemType EMBLEM_GREEN(enums::EMBLEM_GREEN);
  const GuildEmblemType EMBLEM_RED(enums::EMBLEM_RED);
  const GuildEmblemType EMBLEM_BLUE(enums::EMBLEM_BLUE);
//end enum definitions

//begin raw definitions

enum ConstantItemID {
  ITEM_FIREFIELD_PVP    = 1492,
  ITEM_FIREFIELD_NOPVP  = 1500,

  ITEM_POISONFIELD_PVP    = 1496,
  ITEM_POISONFIELD_NOPVP  = 1503,

  ITEM_ENERGYFIELD_PVP    = 1495,
  ITEM_ENERGYFIELD_NOPVP  = 1504,

  ITEM_COINS_GOLD       = 2148,
  ITEM_COINS_PLATINUM   = 2152,
  ITEM_COINS_CRYSTAL    = 2160,

  ITEM_DEPOT            = 2594,
  ITEM_LOCKER1          = 2589,

  ITEM_MALE_CORPSE      = 6080,
  ITEM_FEMALE_CORPSE    = 6081,

  ITEM_MEAT             = 2666,
  ITEM_HAM              = 2671,
  ITEM_GRAPE            = 2681,
  ITEM_APPLE            = 2674,
  ITEM_BREAD            = 2689,
  ITEM_ROLL             = 2690,
  ITEM_CHEESE           = 2696,

  ITEM_FULLSPLASH       = 2016,
  ITEM_SMALLSPLASH      = 2019,

  ITEM_PARCEL           = 2595,
  ITEM_PARCEL_STAMPED   = 2596,
  ITEM_LETTER           = 2597,
  ITEM_LETTER_STAMPED   = 2598,
  ITEM_LABEL            = 2599,

  ITEM_GLOWING_SWITCH   = 11063,

  ITEM_DOCUMENT_RO      = 1968 //read-only
};
//end raw definitions

namespace enums {
  enum PlayerFlag {
    PlayerFlag_CannotUseCombat = 0,
    PlayerFlag_CannotAttackPlayer,
    PlayerFlag_CannotAttackMonster,
    PlayerFlag_CannotBeAttacked,
    PlayerFlag_CanConvinceAll,
    PlayerFlag_CanSummonAll,
    PlayerFlag_CanIllusionAll,
    PlayerFlag_CanSenseInvisibility,
    PlayerFlag_IgnoredByMonsters,
    PlayerFlag_NotGainInFight,
    PlayerFlag_HasInfiniteMana,
    PlayerFlag_HasInfiniteSoul,
    PlayerFlag_HasNoExhaustion,
    PlayerFlag_CannotUseSpells,
    PlayerFlag_CannotPickupItem,
    PlayerFlag_CanAlwaysLogin,
    PlayerFlag_CanBroadcast,
    PlayerFlag_CanEditHouses,
    PlayerFlag_CannotBeBanned,
    PlayerFlag_CannotBePushed,
    PlayerFlag_HasInfiniteCapacity,
    PlayerFlag_CanPushAllCreatures,
    PlayerFlag_CanTalkRedPrivate,
    PlayerFlag_CanTalkRedChannel,
    PlayerFlag_TalkOrangeHelpChannel,
    PlayerFlag_NotGainExperience,
    PlayerFlag_NotGainMana,
    PlayerFlag_NotGainHealth,
    PlayerFlag_NotGainSkill,
    PlayerFlag_SetMaxSpeed,
    PlayerFlag_SpecialVIP,
    PlayerFlag_NotGenerateLoot,
    PlayerFlag_CanTalkRedChannelAnonymous,
    PlayerFlag_IgnoreProtectionZone,
    PlayerFlag_IgnoreSpellCheck,
    PlayerFlag_IgnoreWeaponCheck,
    PlayerFlag_CannotBeMuted,
    PlayerFlag_IsAlwaysPremium,
    PlayerFlag_CanAnswerRuleViolations,
    PlayerFlag_CanReloadContent,
    PlayerFlag_ShowGroupInsteadOfVocation,
    PlayerFlag_HasInfiniteStamina,
    PlayerFlag_CannotMoveItems,
    PlayerFlag_CannotMoveCreatures,
    PlayerFlag_CanReportBugs,
    PlayerFlag_CanSeeSpecialDescription,
    PlayerFlag_CannotBeSeen,
    PlayerFlag_LastFlag,
  }; // end enum
} // end namespace

typedef Enum<enums::PlayerFlag, enums::PlayerFlag_LastFlag + 1> PlayerFlag;

typedef Enum<enums::PlayerFlag, enums::PlayerFlag_LastFlag + 1> PlayerFlag__Base;

//begin enum definitions
  const PlayerFlag PlayerFlag_CannotUseCombat(enums::PlayerFlag_CannotUseCombat);
  const PlayerFlag PlayerFlag_CannotAttackPlayer(enums::PlayerFlag_CannotAttackPlayer);
  const PlayerFlag PlayerFlag_CannotAttackMonster(enums::PlayerFlag_CannotAttackMonster);
  const PlayerFlag PlayerFlag_CannotBeAttacked(enums::PlayerFlag_CannotBeAttacked);
  const PlayerFlag PlayerFlag_CanConvinceAll(enums::PlayerFlag_CanConvinceAll);
  const PlayerFlag PlayerFlag_CanSummonAll(enums::PlayerFlag_CanSummonAll);
  const PlayerFlag PlayerFlag_CanIllusionAll(enums::PlayerFlag_CanIllusionAll);
  const PlayerFlag PlayerFlag_CanSenseInvisibility(enums::PlayerFlag_CanSenseInvisibility);
  const PlayerFlag PlayerFlag_IgnoredByMonsters(enums::PlayerFlag_IgnoredByMonsters);
  const PlayerFlag PlayerFlag_NotGainInFight(enums::PlayerFlag_NotGainInFight);
  const PlayerFlag PlayerFlag_HasInfiniteMana(enums::PlayerFlag_HasInfiniteMana);
  const PlayerFlag PlayerFlag_HasInfiniteSoul(enums::PlayerFlag_HasInfiniteSoul);
  const PlayerFlag PlayerFlag_HasNoExhaustion(enums::PlayerFlag_HasNoExhaustion);
  const PlayerFlag PlayerFlag_CannotUseSpells(enums::PlayerFlag_CannotUseSpells);
  const PlayerFlag PlayerFlag_CannotPickupItem(enums::PlayerFlag_CannotPickupItem);
  const PlayerFlag PlayerFlag_CanAlwaysLogin(enums::PlayerFlag_CanAlwaysLogin);
  const PlayerFlag PlayerFlag_CanBroadcast(enums::PlayerFlag_CanBroadcast);
  const PlayerFlag PlayerFlag_CanEditHouses(enums::PlayerFlag_CanEditHouses);
  const PlayerFlag PlayerFlag_CannotBeBanned(enums::PlayerFlag_CannotBeBanned);
  const PlayerFlag PlayerFlag_CannotBePushed(enums::PlayerFlag_CannotBePushed);
  const PlayerFlag PlayerFlag_HasInfiniteCapacity(enums::PlayerFlag_HasInfiniteCapacity);
  const PlayerFlag PlayerFlag_CanPushAllCreatures(enums::PlayerFlag_CanPushAllCreatures);
  const PlayerFlag PlayerFlag_CanTalkRedPrivate(enums::PlayerFlag_CanTalkRedPrivate);
  const PlayerFlag PlayerFlag_CanTalkRedChannel(enums::PlayerFlag_CanTalkRedChannel);
  const PlayerFlag PlayerFlag_TalkOrangeHelpChannel(enums::PlayerFlag_TalkOrangeHelpChannel);
  const PlayerFlag PlayerFlag_NotGainExperience(enums::PlayerFlag_NotGainExperience);
  const PlayerFlag PlayerFlag_NotGainMana(enums::PlayerFlag_NotGainMana);
  const PlayerFlag PlayerFlag_NotGainHealth(enums::PlayerFlag_NotGainHealth);
  const PlayerFlag PlayerFlag_NotGainSkill(enums::PlayerFlag_NotGainSkill);
  const PlayerFlag PlayerFlag_SetMaxSpeed(enums::PlayerFlag_SetMaxSpeed);
  const PlayerFlag PlayerFlag_SpecialVIP(enums::PlayerFlag_SpecialVIP);
  const PlayerFlag PlayerFlag_NotGenerateLoot(enums::PlayerFlag_NotGenerateLoot);
  const PlayerFlag PlayerFlag_CanTalkRedChannelAnonymous(enums::PlayerFlag_CanTalkRedChannelAnonymous);
  const PlayerFlag PlayerFlag_IgnoreProtectionZone(enums::PlayerFlag_IgnoreProtectionZone);
  const PlayerFlag PlayerFlag_IgnoreSpellCheck(enums::PlayerFlag_IgnoreSpellCheck);
  const PlayerFlag PlayerFlag_IgnoreWeaponCheck(enums::PlayerFlag_IgnoreWeaponCheck);
  const PlayerFlag PlayerFlag_CannotBeMuted(enums::PlayerFlag_CannotBeMuted);
  const PlayerFlag PlayerFlag_IsAlwaysPremium(enums::PlayerFlag_IsAlwaysPremium);
  const PlayerFlag PlayerFlag_CanAnswerRuleViolations(enums::PlayerFlag_CanAnswerRuleViolations);
  const PlayerFlag PlayerFlag_CanReloadContent(enums::PlayerFlag_CanReloadContent);
  const PlayerFlag PlayerFlag_ShowGroupInsteadOfVocation(enums::PlayerFlag_ShowGroupInsteadOfVocation);
  const PlayerFlag PlayerFlag_HasInfiniteStamina(enums::PlayerFlag_HasInfiniteStamina);
  const PlayerFlag PlayerFlag_CannotMoveItems(enums::PlayerFlag_CannotMoveItems);
  const PlayerFlag PlayerFlag_CannotMoveCreatures(enums::PlayerFlag_CannotMoveCreatures);
  const PlayerFlag PlayerFlag_CanReportBugs(enums::PlayerFlag_CanReportBugs);
  const PlayerFlag PlayerFlag_CanSeeSpecialDescription(enums::PlayerFlag_CanSeeSpecialDescription);
  const PlayerFlag PlayerFlag_CannotBeSeen(enums::PlayerFlag_CannotBeSeen);
  const PlayerFlag PlayerFlag_LastFlag(enums::PlayerFlag_LastFlag);
//end enum definitions

//begin raw definitions

typedef PlayerFlag PlayerFlags;//end raw definitions

//begin raw definitions

enum ViolationActions_t
{
  Action_None                     = 0,
  Action_Notation                 = 1 << 0,
  Action_Namelock                 = 1 << 1,
  Action_Banishment               = 1 << 2,
  Action_NamelockBan              = 1 << 3,
  Action_BanFinalWarning          = 1 << 4,
  Action_NamelockBanFinalWarning  = 1 << 5,
  Action_StatementReport          = 1 << 6,
  Action_IpBan                    = 1 << 7
};

const int32_t violationReasons[5] =
{
  0,  //ignore this
  3,  //all name reasons
  9,  //all name & statement reasons
  18,  //all name, statement & cheating reasons
  19  //all name, statement & cheating reasons & ip-banishment
};

const int32_t violationNames[5] =
{
  Action_None,
  Action_Namelock,
  Action_Namelock,
  Action_Namelock | Action_NamelockBan,
  Action_Namelock | Action_NamelockBan | Action_NamelockBanFinalWarning | Action_IpBan
};

const int32_t violationStatements[5] =
{
  Action_None,
  Action_None,
  Action_StatementReport,
  Action_StatementReport | Action_Notation | Action_Banishment,
  Action_StatementReport | Action_Notation | Action_Banishment | Action_BanFinalWarning | Action_IpBan
};
//end raw definitions


#endif
