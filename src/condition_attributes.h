
// This file has been automatically generated by a script.
// Do not make changes to this file manually, as they will be discarded
// as soon as the project is recompiled

#ifndef CONDITION_ATTRIBUTES_H
#define CONDITION_ATTRIBUTES_H
#include "enum.h"

namespace enums {
  enum ConditionId {
    CONDITION_NONE,
    CONDITION_POISONED,
    CONDITION_BURNING,
    CONDITION_ELECTRIFIED,
    CONDITION_DROWNING,
    CONDITION_FREEZING,
    CONDITION_DAZZLED,
    CONDITION_CURSED,
    CONDITION_PARALYZED,
    CONDITION_INVISIBLE,
    CONDITION_DRUNK,
    CONDITION_HASTE,
    CONDITION_INFIGHT,
    CONDITION_SHAPESHIFT,
    CONDITION_MANASHIELD,
    CONDITION_PACIFIED,
    CONDITION_DISARMED,
    CONDITION_SILENCED,
    CONDITION_LIGHT,
    CONDITION_REGENERATION,
    CONDITION_REGENSOUL,
    CONDITION_MUTED_CHAT,
    CONDITION_MUTED_CHAT_TRADE,
    CONDITION_EXHAUST_DAMAGE,
    CONDITION_EXHAUST_HEAL,
    CONDITION_EXHAUST_YELL,
    CONDITION_HUNTING,
  }; // end enum
} // end namespace

typedef Enum<enums::ConditionId, enums::CONDITION_HUNTING + 1> ConditionId;

typedef Enum<enums::ConditionId, enums::CONDITION_HUNTING + 1> ConditionId__Base;

//begin enum definitions
  const ConditionId CONDITION_NONE(enums::CONDITION_NONE);
  const ConditionId CONDITION_POISONED(enums::CONDITION_POISONED);
  const ConditionId CONDITION_BURNING(enums::CONDITION_BURNING);
  const ConditionId CONDITION_ELECTRIFIED(enums::CONDITION_ELECTRIFIED);
  const ConditionId CONDITION_DROWNING(enums::CONDITION_DROWNING);
  const ConditionId CONDITION_FREEZING(enums::CONDITION_FREEZING);
  const ConditionId CONDITION_DAZZLED(enums::CONDITION_DAZZLED);
  const ConditionId CONDITION_CURSED(enums::CONDITION_CURSED);
  const ConditionId CONDITION_PARALYZED(enums::CONDITION_PARALYZED);
  const ConditionId CONDITION_INVISIBLE(enums::CONDITION_INVISIBLE);
  const ConditionId CONDITION_DRUNK(enums::CONDITION_DRUNK);
  const ConditionId CONDITION_HASTE(enums::CONDITION_HASTE);
  const ConditionId CONDITION_INFIGHT(enums::CONDITION_INFIGHT);
  const ConditionId CONDITION_SHAPESHIFT(enums::CONDITION_SHAPESHIFT);
  const ConditionId CONDITION_MANASHIELD(enums::CONDITION_MANASHIELD);
  const ConditionId CONDITION_PACIFIED(enums::CONDITION_PACIFIED);
  const ConditionId CONDITION_DISARMED(enums::CONDITION_DISARMED);
  const ConditionId CONDITION_SILENCED(enums::CONDITION_SILENCED);
  const ConditionId CONDITION_LIGHT(enums::CONDITION_LIGHT);
  const ConditionId CONDITION_REGENERATION(enums::CONDITION_REGENERATION);
  const ConditionId CONDITION_REGENSOUL(enums::CONDITION_REGENSOUL);
  const ConditionId CONDITION_MUTED_CHAT(enums::CONDITION_MUTED_CHAT);
  const ConditionId CONDITION_MUTED_CHAT_TRADE(enums::CONDITION_MUTED_CHAT_TRADE);
  const ConditionId CONDITION_EXHAUST_DAMAGE(enums::CONDITION_EXHAUST_DAMAGE);
  const ConditionId CONDITION_EXHAUST_HEAL(enums::CONDITION_EXHAUST_HEAL);
  const ConditionId CONDITION_EXHAUST_YELL(enums::CONDITION_EXHAUST_YELL);
  const ConditionId CONDITION_HUNTING(enums::CONDITION_HUNTING);
//end enum definitions

namespace enums {
  enum ConditionAttribute {
    CONDITIONATTRIBUTE_MECHANIC = 1,
    CONDITIONATTRIBUTE_COMBAT = 2,
    CONDITIONATTRIBUTE_SOURCE = 3,
    CONDITIONATTRIBUTE_TICKS = 4,
    CONDITIONATTRIBUTE_NAME = 5,
    CONDITIONATTRIBUTE_FLAGS = 6,
    CONDITIONATTRIBUTE_EFFECT = 7,
    CONDITIONATTR_END = 254,
  }; // end enum
} // end namespace

typedef Enum<enums::ConditionAttribute, enums::CONDITIONATTR_END + 1> ConditionAttribute;

typedef Enum<enums::ConditionAttribute, enums::CONDITIONATTR_END + 1> ConditionAttribute__Base;

//begin enum definitions
  const ConditionAttribute CONDITIONATTRIBUTE_MECHANIC(enums::CONDITIONATTRIBUTE_MECHANIC);
  const ConditionAttribute CONDITIONATTRIBUTE_COMBAT(enums::CONDITIONATTRIBUTE_COMBAT);
  const ConditionAttribute CONDITIONATTRIBUTE_SOURCE(enums::CONDITIONATTRIBUTE_SOURCE);
  const ConditionAttribute CONDITIONATTRIBUTE_TICKS(enums::CONDITIONATTRIBUTE_TICKS);
  const ConditionAttribute CONDITIONATTRIBUTE_NAME(enums::CONDITIONATTRIBUTE_NAME);
  const ConditionAttribute CONDITIONATTRIBUTE_FLAGS(enums::CONDITIONATTRIBUTE_FLAGS);
  const ConditionAttribute CONDITIONATTRIBUTE_EFFECT(enums::CONDITIONATTRIBUTE_EFFECT);
  const ConditionAttribute CONDITIONATTR_END(enums::CONDITIONATTR_END);
//end enum definitions

namespace enums {
  enum MechanicType {
    MECHANIC_NONE = 0,
    MECHANIC_SHAPESHIFT = 1,
    MECHANIC_PACIFIED = 2,
    MECHANIC_DISARMED = 4,
    MECHANIC_SHIELDED = 8,
    MECHANIC_SILENCED = 16,
    MECHANIC_PARALYZED = 32,
    MECHANIC_DRUNK = 64,
    MECHANIC_INVISIBLE = 128,
  }; // end enum
} // end namespace

typedef BitEnum<enums::MechanicType, 8> MechanicType;

typedef Enum<enums::MechanicType, 8> MechanicType__Base;

//begin enum definitions
  const MechanicType MECHANIC_NONE(enums::MECHANIC_NONE);
  const MechanicType MECHANIC_SHAPESHIFT(enums::MECHANIC_SHAPESHIFT);
  const MechanicType MECHANIC_PACIFIED(enums::MECHANIC_PACIFIED);
  const MechanicType MECHANIC_DISARMED(enums::MECHANIC_DISARMED);
  const MechanicType MECHANIC_SHIELDED(enums::MECHANIC_SHIELDED);
  const MechanicType MECHANIC_SILENCED(enums::MECHANIC_SILENCED);
  const MechanicType MECHANIC_PARALYZED(enums::MECHANIC_PARALYZED);
  const MechanicType MECHANIC_DRUNK(enums::MECHANIC_DRUNK);
  const MechanicType MECHANIC_INVISIBLE(enums::MECHANIC_INVISIBLE);
//end enum definitions

namespace enums {
  enum ConditionEnd {
    CONDITIONEND_DURATION,
    CONDITIONEND_DEATH,
    CONDITIONEND_REMOVED,
    CONDITIONEND_UPDATE,
    CONDITIONEND_CLEANUP,
  }; // end enum
} // end namespace

typedef Enum<enums::ConditionEnd, enums::CONDITIONEND_CLEANUP + 1> ConditionEnd;

typedef Enum<enums::ConditionEnd, enums::CONDITIONEND_CLEANUP + 1> ConditionEnd__Base;

//begin enum definitions
  const ConditionEnd CONDITIONEND_DURATION(enums::CONDITIONEND_DURATION);
  const ConditionEnd CONDITIONEND_DEATH(enums::CONDITIONEND_DEATH);
  const ConditionEnd CONDITIONEND_REMOVED(enums::CONDITIONEND_REMOVED);
  const ConditionEnd CONDITIONEND_UPDATE(enums::CONDITIONEND_UPDATE);
  const ConditionEnd CONDITIONEND_CLEANUP(enums::CONDITIONEND_CLEANUP);
//end enum definitions


#endif
